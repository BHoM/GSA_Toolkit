<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BHoM</name>
    </assembly>
    <members>
        <member name="M:BHoM.Geometry.GeometryBase.ShallowClone">
            <summary>Create a shallow copy of the object</summary>
        </member>
        <member name="M:BHoM.Geometry.GeometryBase.FromJSON(System.String,BHoM.Global.Project)">
            <summary>
            Creates a geometry object from a json format string
            </summary>
            <param name="json"></param>
            <returns>Geometry object</returns>
        </member>
        <member name="M:BHoM.Geometry.Intersect.PlaneCurve(BHoM.Geometry.Plane,BHoM.Geometry.Curve,System.Double)">
            <summary>
            Gets the plane curve intersection geometry within the provided tolerance
            </summary>
            <param name="p">Plane</param>
            <param name="c">Curve</param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Transform.Rotation(BHoM.Geometry.Point,BHoM.Geometry.Vector,System.Double)">
            <summary>
            Creates a new Rotational Transformation
            </summary>
            <param name="centre">Centre of rotation</param>
            <param name="axis">Axis of rotation</param>
            <param name="angle">Rotation angle</param>
            <returns>A new instance of a rotation matrix</returns>
        </member>
        <member name="M:BHoM.Geometry.Transform.Translation(BHoM.Geometry.Vector)">
            <summary>
            Creates a new Translation Transformation
            </summary>
            <param name="vector"></param>
            <returns>A new instance of a Translation matrix</returns>
        </member>
        <member name="M:BHoM.Geometry.Transform.Identity">
            <summary>
            Create a new Indentity transformation
            </summary>
            <returns>An identity matrix</returns>
        </member>
        <member name="M:BHoM.Geometry.Transform.Inverse">
            <summary>
            Inverse
            </summary>
            <returns>Transform Inserves</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BHoM.Geometry.Transform.Determinant" -->
        <member name="M:BHoM.Geometry.Transform.Transpose">
            <summary>
            Matrix Transpose
            </summary>
            <returns>The transpose matrix of the current Transfrom</returns>
        </member>
        <member name="M:BHoM.Geometry.Transform.op_Multiply(BHoM.Geometry.Transform,BHoM.Geometry.Transform)">
            <summary>
            Transform operations
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Transform.op_Multiply(BHoM.Geometry.Transform,BHoM.Geometry.Vector)">
            <summary>
            Transform operations
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Transform.op_Multiply(BHoM.Geometry.Transform,BHoM.Geometry.Point)">
            <summary>
            Transform operations
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:BHoM.Geometry.Arc">
            <summary>
            Arc object
            </summary>
        </member>
        <member name="M:BHoM.Geometry.Arc.#ctor(BHoM.Geometry.Point,BHoM.Geometry.Point,BHoM.Geometry.Point)">
            <summary>
            Arc from 3 points
            </summary>
            <param name="startpoint"></param>
            <param name="endpoint"></param>
            <param name="internalpoint"></param>
        </member>
        <member name="M:BHoM.Geometry.Arc.#ctor(BHoM.Geometry.Point,BHoM.Geometry.Point,BHoM.Geometry.Plane)">
            <summary>
            Construct an arc using start point, end point and base plane
            </summary>
            <param name="startpoint"></param>
            <param name="endpoint"></param>
            <param name="plane"></param>
        </member>
        <member name="M:BHoM.Geometry.Arc.#ctor(System.Double,System.Double,System.Double,BHoM.Geometry.Plane)">
            <summary>
            
            </summary>
            <param name="startAngle"></param>
            <param name="endAngle"></param>
            <param name="radius"></param>
            <param name="plane"></param>
        </member>
        <member name="P:BHoM.Geometry.Curve.StartPoint">
            <summary>Start point as BHoM point</summary>
            
        </member>
        <member name="P:BHoM.Geometry.Curve.EndPoint">
            <summary>End point as BHoM point</summary>
        </member>
        <member name="T:BHoM.Geometry.Line">
            <summary>
            BHoM Line object
            </summary>
        </member>
        <member name="M:BHoM.Geometry.Line.#ctor(BHoM.Geometry.Point,BHoM.Geometry.Point)">
            <summary>
            Construct line by start point and end point
            </summary>
            <param name="startpoint"></param>
            <param name="endpoint"></param>
        </member>
        <member name="M:BHoM.Geometry.Line.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct line by start and end point coordinates
            </summary>
            <param name="start_x"></param>
            <param name="start_y"></param>
            <param name="start_z"></param>
            <param name="end_x"></param>
            <param name="end_y"></param>
            <param name="end_z"></param>
        </member>
        <member name="T:BHoM.Geometry.Face">
            <summary>
            BHoM Meshface object
            </summary>
        </member>
        <member name="T:BHoM.Geometry.Mesh">
            <summary>
            BHoM Mesh geometry object
            </summary>
        </member>
        <member name="P:BHoM.Geometry.Mesh.Vertices">
            <summary>Vertices as a list of points</summary>
        </member>
        <member name="P:BHoM.Geometry.Mesh.Faces">
            <summary>Faces as a list of integer arrays</summary>
        </member>
        <member name="M:BHoM.Geometry.Mesh.#ctor">
            <summary>
            Construct empty mesh
            </summary>
        </member>
        <member name="M:BHoM.Geometry.Mesh.AddVertice(BHoM.Geometry.Point)">
            <summary>
            Add a mesh vertice
            </summary>
            <param name="vertice"></param>
        </member>
        <member name="M:BHoM.Geometry.Mesh.AddVertices(System.Collections.Generic.List{BHoM.Geometry.Point})">
            <summary>
            Add multiple mesh vertices
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="T:BHoM.Geometry.Surface">
            <summary>
            BHoM Surface object
            </summary>
        </member>
        <member name="T:BHoM.Geometry.Plane">
            <summary>
            BHoM Plane object
            </summary>
        </member>
        <member name="M:BHoM.Geometry.Plane.DistanceTo(BHoM.Geometry.Point)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:BHoM.Geometry.Plane.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="P:BHoM.Geometry.Plane.D">
            <summary>
            
            </summary>
        </member>
        <member name="M:BHoM.Geometry.Plane.InPlane(BHoM.Geometry.Point,System.Double)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Plane.Mirror(BHoM.Geometry.Plane)">
            <summary>
            Mirrors vector about a plane
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:BHoM.Geometry.Plane.Project(BHoM.Geometry.Plane)">
            <summary>
            Projects a vector onto a plane
            </summary>
            <param name="plane"></param>
        </member>
        <member name="T:BHoM.Geometry.Point">
            <summary>
            BHoM Point object
            </summary>
        </member>
        <member name="P:BHoM.Geometry.Point.X">
            <summary>X coordinate</summary>
        </member>
        <member name="P:BHoM.Geometry.Point.Y">
            <summary>Y coordinate</summary>
        </member>
        <member name="P:BHoM.Geometry.Point.Z">
            <summary>Z coordinate</summary>
        </member>
        <member name="M:BHoM.Geometry.Point.#ctor">
            <summary>
            Construct an empty point
            </summary>
        </member>
        <member name="M:BHoM.Geometry.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a point from coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:BHoM.Geometry.Point.#ctor(System.Double[])">
            <summary>
            Construct a point from a double array
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:BHoM.Geometry.Point.#ctor(BHoM.Geometry.Point)">
            <summary>
            Duplicate a point
            </summary>
            <param name="dup"></param>
        </member>
        <member name="M:BHoM.Geometry.Point.op_Implicit(BHoM.Geometry.Point)~System.Double[]">
            <summary>
            Create a point from json
            </summary>
        </member>
        <member name="P:BHoM.Geometry.Point.IsValid">
            <summary>
            True if the point has valid coordinates
            </summary>
        </member>
        <member name="M:BHoM.Geometry.Point.DuplicatePoint">
            <summary>
            Duplicates a point
            </summary>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.Duplicate">
            <summary>
            Duplicates a point
            </summary>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.op_Subtraction(BHoM.Geometry.Point,BHoM.Geometry.Point)">
            <summary>
            Vector operations a-b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.op_Addition(BHoM.Geometry.Point,BHoM.Geometry.Point)">
            <summary>
            Vector operations a+b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.op_Addition(BHoM.Geometry.Point,BHoM.Geometry.Vector)">
            <summary>
            Move point by adding a vector
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.op_Subtraction(BHoM.Geometry.Point,BHoM.Geometry.Vector)">
            <summary>
            Move point by subtracting a vector
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.op_Multiply(BHoM.Geometry.Point,System.Double)">
            <summary>
            Move a point by scaling coordinate values
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.op_Multiply(System.Double,BHoM.Geometry.Point)">
            <summary>
            Move a point by scaling coordinate values
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.op_Division(BHoM.Geometry.Point,System.Double)">
            <summary>
            Move a point by scaling coordinate values
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.op_Division(System.Double,BHoM.Geometry.Point)">
            <summary>
            Point operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.Average(System.Collections.Generic.List{BHoM.Geometry.Point})">
            <summary>
            Calcualte mean pt from list of points
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.Max(System.Collections.Generic.List{BHoM.Geometry.Point})">
            <summary>
            Calcualte max pt from list of points
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.Min(System.Collections.Generic.List{BHoM.Geometry.Point})">
            <summary>
            Calcualte min pt from list of points
            </summary>
            <param name="pts"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Point.DistanceTo(BHoM.Geometry.Point)">
            <summary>
            Get the distance from a point 
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:BHoM.Geometry.Point.Origin">
            <summary>
            Constructs a point at 0,0,0
            </summary>
        </member>
        <member name="T:BHoM.Geometry.Vector">
            <summary>
            BHoM Vector object
            </summary>
        </member>
        <member name="P:BHoM.Geometry.Vector.X">
            <summary>X coordinate</summary>
        </member>
        <member name="P:BHoM.Geometry.Vector.Y">
            <summary>Y coordinate</summary>
        </member>
        <member name="P:BHoM.Geometry.Vector.Z">
            <summary>Z coordinate</summary>
        </member>
        <member name="M:BHoM.Geometry.Vector.#ctor">
            <summary>
            Constructs an empty vector
            </summary>
        </member>
        <member name="M:BHoM.Geometry.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a vector from XYZ coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:BHoM.Geometry.Vector.#ctor(BHoM.Geometry.Vector)">
            <summary>
            Duplicates a vector
            </summary>
            <param name="dup"></param>
        </member>
        <member name="M:BHoM.Geometry.Vector.#ctor(BHoM.Geometry.Point)">
            <summary>
            Constructs a vector from a point
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:BHoM.Geometry.Vector.op_Addition(BHoM.Geometry.Vector,BHoM.Geometry.Vector)">
            <summary>
            Vector operations
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.op_Subtraction(BHoM.Geometry.Vector,BHoM.Geometry.Vector)">
            <summary>
            Vector operations
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.op_Division(BHoM.Geometry.Vector,System.Double)">
            <summary>
            Vector operations
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.op_Multiply(BHoM.Geometry.Vector,System.Double)">
            <summary>
            Vector operations
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.op_Multiply(System.Double,BHoM.Geometry.Vector)">
            <summary>
            Vector operations
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.op_Multiply(BHoM.Geometry.Vector,BHoM.Geometry.Vector)">
            <summary>
            Vector operations
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.CrossProduct(BHoM.Geometry.Vector,BHoM.Geometry.Vector)">
            <summary>
            Cross product of two vectors
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.DotProduct(BHoM.Geometry.Vector,BHoM.Geometry.Vector)">
            <summary>
            Dot product of two vectors
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:BHoM.Geometry.Vector.Length">
            <summary>
            Calculates the vector length
            </summary>
        </member>
        <member name="M:BHoM.Geometry.Vector.Unitize">
            <summary>
            Sets the vector length to one unit
            </summary>
            <returns></returns>
        </member>
        <member name="P:BHoM.Geometry.Vector.IsValid">
            <summary>
            True if the vector XYZ values are set
            </summary>
        </member>
        <member name="P:BHoM.Geometry.Vector.U">
            <summary>
            Gets the vector length
            </summary>
        </member>
        <member name="M:BHoM.Geometry.Vector.DuplicateVector">
            <summary>
            Duplicates the vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.Rotate(System.Double,BHoM.Geometry.Vector)">
            <summary>
            Rotates vector using Rodrigues' rotation formula
            </summary>
            <param name="rad"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.Reverse">
            <summary>
            Returns the reversed vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.VectorAngle(BHoM.Geometry.Vector,BHoM.Geometry.Vector)">
            <summary>
            Calculate the angle in radians between two vectors
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.SafeAcos(System.Double)">
            <summary>
            Computes Acos with tolerance for rounding errors
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.VectorAngle(BHoM.Geometry.Vector,BHoM.Geometry.Vector,BHoM.Geometry.Vector)">
            <summary>
            Calculate the angle in radians between two vectors with a guide normal vector to determine sign
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Geometry.Vector.Transform(BHoM.Geometry.Transform)">
            <summary>
            Transform Vector
            </summary>
            <param name="t">Transformation matrix</param>
        </member>
        <member name="M:BHoM.Geometry.Vector.Mirror(BHoM.Geometry.Plane)">
            <summary>
            Mirrors vector about a plane
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:BHoM.Geometry.Vector.Project(BHoM.Geometry.Plane)">
            <summary>
            Projects a vector onto a plane
            </summary>
            <param name="plane"></param>
        </member>
        <member name="T:BHoM.Global.BHoMObject">
            <summary>
            BHoM object abstract class, all methods and attributes applicable to all structural objects with
            BHoM implemented
            </summary>
        </member>
        <member name="P:BHoM.Global.BHoMObject.BHoM_Guid">
            <summary>BHoM unique ID</summary>
        </member>
        <member name="P:BHoM.Global.BHoMObject.Name">
            <summary>Name</summary>
        </member>
        <member name="P:BHoM.Global.BHoMObject.CustomData">
            <summary>Object parameters</summary>
        </member>
        <member name="M:BHoM.Global.BHoMObject.CreateInstance(System.Type)">
            <summary>
            Creates a BHoM Object of the specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:BHoM.Global.BHoMObject.Item(System.String)">
            <summary>
            Looks for the key in the custom data dictionary
            </summary>
            <param name="key">Data key</param>
            <returns>The corresponding object if the key exists, null otherwise</returns>
        </member>
        <member name="M:BHoM.Global.BHoMObject.ShallowClone">
            <summary>Create a shallow copy of the object</summary>
        </member>
        <member name="M:BHoM.Global.BHoMObject.GetGeometry">
            <summary>Gets the geometry of the object (whatever that might be)</summary>
        </member>
        <member name="M:BHoM.Global.BHoMObject.SetGeometry(BHoM.Geometry.GeometryBase)">
            <summary>Sets the geometry of the object (whatever that might be)</summary>
        </member>
        <member name="M:BHoM.Global.BHoMObject.GetPropertyNames">
            <summary>Method which gets a properties dictionary for simple downstream deconstruct</summary>
        </member>
        <member name="M:BHoM.Global.BHoMObject.ToJSON(System.String)">
            <summary>
            Method which convert the object as a Json string
            </summary>
        </member>
        <member name="M:BHoM.Global.BHoMObject.FromJSON(System.String,BHoM.Global.Project)">
            <summary>
            Method which convert the object as a Json string
            </summary>
        </member>
        <member name="M:BHoM.Global.BHoMObject.ToString">
            <summary>
            BHoM Object will return its name as default 
            </summary>
            <returns></returns>
        </member>
        <member name="M:BHoM.Global.BHoMObject.GetDeepDependencies(System.Collections.Generic.Dictionary{System.Guid,BHoM.Global.BHoMObject}@)">
            <summary>
            Get all dependencies related to that object
            </summary>
        </member>
        <member name="T:BHoM.Global.ObjectFilter`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:BHoM.Global.ObjectFilter`1.#ctor(BHoM.Global.Project)">
            <summary>
            
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:BHoM.Global.ObjectFilter`1.#ctor(BHoM.Global.Project,System.Collections.Generic.List{`0})">
            <summary>
            
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:BHoM.Global.ObjectFilter`1.ToDictionary``1(System.String,BHoM.Global.FilterOption)">
            <summary>
            Create a dictionary based on a defined unqiue key, Note: if duplicate keys exists on the first one found will be added
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="propertyName"></param>
            <param name="option"></param>
            <returns>A key, value pair based on the input option</returns>
        </member>
        <member name="T:BHoM.Global.BHoMObjectEnum">
            <summary>
            
            </summary>
        </member>
        <member name="F:BHoM.Global.BHoMObjectEnum._BHoMOjects">
            <summary></summary>
        </member>
        <member name="M:BHoM.Global.BHoMObjectEnum.#ctor(BHoM.Global.BHoMObject[])">
            <summary></summary>
            <param name="list"></param>
        </member>
        <member name="P:BHoM.Global.BHoMObjectEnum.System#Collections#IEnumerator#Current">
            <summary></summary>
        </member>
        <member name="P:BHoM.Global.BHoMObjectEnum.Current">
            <summary></summary>
        </member>
        <member name="M:BHoM.Global.BHoMObjectEnum.MoveNext">
            <summary></summary>
        </member>
        <member name="M:BHoM.Global.BHoMObjectEnum.Reset">
            <summary></summary>
        </member>
        <member name="T:BHoM.Global.ObjectManager`1">
            <summary>
            Object manager Class.
            Used to add objects to the project where a unique identifier other than a Guid is required. Just inputting the BHoMObject type will default the key to the object name.
            </summary>
            <typeparam name="TValue">Type of BHoMObject</typeparam>
        </member>
        <member name="M:BHoM.Global.ObjectManager`1.#ctor(BHoM.Global.Project)">
            <summary>
            Initialises a new object manager where the BHoM object name is used as the default key
            </summary>
        </member>
        <member name="T:BHoM.Global.ObjectManager`2">
            <summary>
            Object manager Class.
            Used to add objects to the project where a unique identifier other than a Guid is required
            </summary>
            <typeparam name="TKey">Type of unique identifier</typeparam>
            <typeparam name="TValue">Type of BHoMObject</typeparam>
        </member>
        <member name="M:BHoM.Global.ObjectManager`2.#ctor(BHoM.Global.Project,System.String,BHoM.Global.FilterOption)">
            <summary>
            Initialises a new object manager based on the input name and option
            </summary>
            <param name="name">Name of the BHoM Property or userdata name</param>
            <param name="option">Fliter option defines the type of key to be used</param>
            
        </member>
        <member name="M:BHoM.Global.ObjectManager`2.GetUniqueNumber">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:BHoM.Global.ObjectManager`2.Item(`0)">
            <summary>
            Lookup object which corresponds to the input key. Note: if the key does not exists nothing will be returned
            </summary>
            <param name="key">object key</param>
            <returns>object corresponding to key</returns>
        </member>
        <member name="M:BHoM.Global.ObjectManager`2.TryLookup(`0)">
            <summary>
            Safe method for looking up value in dictionary
            </summary>
            <param name="key">object key</param>
            <returns>if key exists it will return the object, null otherwise</returns>
        </member>
        <member name="M:BHoM.Global.ObjectManager`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:BHoM.Global.ObjectManager`2.Count">
            <summary>
            Number of objects in the collection
            </summary>
        </member>
        <member name="T:BHoM.Global.Project">
            <summary>
            A global project class that encapsulates all objects (all disciplines) of a BHoM project
            </summary>
        </member>
        <member name="P:BHoM.Global.Project.Objects">
            <summary>
            All object currently in the model
            </summary>
        </member>
        <member name="P:BHoM.Global.Project.Structure">
            <summary>Structure property - gets or sets the structure of the object as a BHoM.Structural.Structure</summary>
        </member>
        <member name="P:BHoM.Global.Project.Name">
            <summary>Structure name</summary>
        </member>
        <member name="P:BHoM.Global.Project.Tolerance">
            <summary>Tolerance of structure for node merge etc</summary>
        </member>
        <member name="P:BHoM.Global.Project.Id">
            <summary>
            Project Id
            </summary>
        </member>
        <member name="P:BHoM.Global.Project.ActiveProject">
            <summary>
            Active project
            </summary>
        </member>
        <member name="M:BHoM.Global.Project.ToJSON(System.String)">
            <summary>
            Writes the entire project to JSON Format
            </summary>
            <param name="extra"></param>
            <returns>JSON formatted text</returns>
        </member>
        <member name="M:BHoM.Global.Project.FromJSON(System.String)">
            <summary>
            Loads an entire Project from JSON Format
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Global.Project.#ctor">
            <summary>
            Constructs an empty project
            </summary>
        </member>
        <member name="M:BHoM.Global.Project.GetObject(System.Guid)">
            <summary>Returns a BHoM by unique identifier</summary>
        </member>
        <member name="M:BHoM.Global.Project.AddObject(BHoM.Global.BHoMObject)">
            <summary>
            Adds a BHoM Object to the project
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:BHoM.Global.Project.RemoveObject(System.Guid)">
            <summary>
            Removes an object from the project
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:BHoM.Global.Project.Clear">
            <summary>
            Removes all objects from the project
            </summary>
        </member>
        <member name="T:BHoM.Structural.IStructuralAdapter">
            <summary>
            An interface class which should be inherited by an external application in order to import and export BHoMObjects
            </summary>
        </member>
        <member name="T:BHoM.Structural.IStructuralObject">
            <summary>
            Structural object interface, all methods and attributes applicable to all structural objects with
            IStructuralObject implemented
            </summary>
        </member>
        <member name="P:BHoM.Structural.Opening.Edges">
            <summary>
            A group of curves which define the perimeter of panel object
            </summary>
        </member>
        <member name="M:BHoM.Structural.Opening.#ctor(BHoM.Geometry.Group{BHoM.Geometry.Curve})">
            <summary>
            Creates a panel object from a group of curve objects. Note: Curves must be able to join together to form a single closed curve or panel will be invalid
            </summary>
            <param name="edges"></param>
            <param name="number"></param>
        </member>
        <member name="T:BHoM.Structural.Panel">
            <summary>
            Panel Class
            </summary>
        </member>
        <member name="P:BHoM.Structural.Panel.Edges">
            <summary>
            A group of curves which define the perimeter of panel object
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BHoM.Structural.Panel.#ctor(BHoM.Geometry.Group{BHoM.Geometry.Curve})" -->
        <member name="M:BHoM.Structural.Panel.#ctor(System.Collections.Generic.List{BHoM.Geometry.Curve})">
            <summary>
            Creates a panel object from a group of curve objects. Note: Curves must be able to join together to form a single closed curve or panel will be invalid
            </summary>
            <param name="edges"></param>
            <param name="number"></param>
        </member>
        <member name="M:BHoM.Structural.Panel.GetGeometry">
            <summary></summary>
        </member>
        <member name="M:BHoM.Structural.Panel.SetGeometry(BHoM.Geometry.GeometryBase)">
            <summary></summary>
        </member>
        <member name="T:BHoM.Structural.Beam">
            <summary>
            Beam class, can be used as a wrapper for an analytical bar object
            </summary>
        </member>
        <member name="P:BHoM.Structural.Beam.BHoM_Guid">
            <summary>BHoM unique ID</summary>
        </member>
        <member name="P:BHoM.Structural.Beam.Bars">
            <summary>
            Bar objects which make up the beam, if only one entry then beam
            consists of only one bar
            </summary>
        </member>
        <member name="P:BHoM.Structural.Beam.StartPoint">
            <summary>Beam start point</summary>
        </member>
        <member name="P:BHoM.Structural.Beam.EndPoint">
            <summary>Beam end point</summary>
        </member>
        <member name="P:BHoM.Structural.Beam.LevelName">
            <summary>Level for vertical reference</summary>
        </member>
        <member name="P:BHoM.Structural.Beam.StartOffset">
            <summary>Offset of the beam start point from the reference level</summary>
        </member>
        <member name="P:BHoM.Structural.Beam.EndOffset">
            <summary>Offset of the beam end point from the reference level</summary>
        </member>
        <member name="M:BHoM.Structural.Beam.#ctor(BHoM.Structural.Bar)">
            <summary>
            Constructs a beam object from a bar object, if data is missing this can be
            set separately
            </summary>
            <param name="bar"></param>
        </member>
        <member name="M:BHoM.Structural.Beam.SetLevel(System.String)">
            <summary>
            Sets the name of the beam reference level
            </summary>
            <param name="levelName"></param>
        </member>
        <member name="M:BHoM.Structural.Beam.SetStartOffset(System.Double)">
            <summary>
            Set the offset distance between the beam start point and the reference level
            </summary>
            <param name="distance"></param>
        </member>
        <member name="M:BHoM.Structural.Beam.SetEndOffset(System.Double)">
            <summary>
            Set the offset distance between the beam end point and the reference level
            </summary>
            <param name="distance"></param>
        </member>
        <member name="T:BHoM.Structural.DOF">
            <summary>
            Degrees of freedom class for use in constraint objects
            </summary>
        </member>
        <member name="P:BHoM.Structural.DOF.Type">
            <summary>Type of DOF (linear/non-linear etc)</summary>
        </member>
        <member name="P:BHoM.Structural.DOF.Value">
            <summary>DOF value, -1 for fixed, 0 for free</summary>
        </member>
        <member name="M:BHoM.Structural.DOF.#ctor">
            <summary>Constructs an empty DOF object</summary>
        </member>
        <member name="M:BHoM.Structural.DOF.#ctor(BHoM.Structural.DOFType,System.Double)">
            <summary>Constructs a DOF using direciton, type and value</summary>
        </member>
        <member name="M:BHoM.Structural.DOF.#ctor(BHoM.Structural.DOFType,System.Object)">
            <summary>Constructs a DOF using direction, type and values as objects for non-linear model</summary>
        </member>
        <member name="T:BHoM.Structural.NodeConstraint">
            <summary>
            Constraint object - base class for all release, restraint, support classes. 
            </summary>
        </member>
        <member name="P:BHoM.Structural.NodeConstraint.Type">
            <summary>Constraint type</summary>
        </member>
        <member name="M:BHoM.Structural.NodeConstraint.#ctor">
            <summary>
            Construct an empty constraint object
            </summary>
        </member>
        <member name="M:BHoM.Structural.NodeConstraint.#ctor(System.String)">
            <summary>
            Construct an empty constraint object with a name
            </summary>
        </member>
        <member name="M:BHoM.Structural.NodeConstraint.#ctor(System.String,System.Boolean[],System.Double[])">
            <summary>Construct a constraint from true/false. True blocks a DOF. 
            Only fixed or free constraint types can be constructed using this.</summary>       
        </member>
        <member name="M:BHoM.Structural.BarConstraint.#ctor">
            <summary>
            Construct an empty constraint object
            </summary>
        </member>
        <member name="M:BHoM.Structural.BarConstraint.#ctor(System.String)">
            <summary>
            Construct an empty constraint object with a name
            </summary>
        </member>
        <member name="M:BHoM.Structural.SurfaceConstraint.#ctor">
            <summary>
            Construct an empty constraint object
            </summary>
        </member>
        <member name="M:BHoM.Structural.SurfaceConstraint.#ctor(System.String)">
            <summary>
            Construct an empty constraint object with a name
            </summary>
        </member>
        <member name="T:BHoM.Structural.Storey">
            <summary>
            Storey class to store information about building storeys for post processing of results
            </summary>
        </member>
        <member name="P:BHoM.Structural.Storey.Number">
            <summary>Storey number</summary>
        </member>
        <member name="P:BHoM.Structural.Storey.Elevation">
            <summary>Storey level (in metres)</summary>
        </member>
        <member name="P:BHoM.Structural.Storey.Name">
            <summary>Storey name</summary>
        </member>
        <member name="P:BHoM.Structural.Storey.Height">
            <summary>Storey height</summary>
        </member>
        <member name="P:BHoM.Structural.Storey.Plane">
            <summary>
            
            </summary>
        </member>
        <member name="M:BHoM.Structural.Storey.#ctor">
            <summary>
            Constructs and empty storey object
            </summary>
        </member>
        <member name="M:BHoM.Structural.Storey.#ctor(System.Int32,System.String)">
            <summary>
            Constructs a storey object using number and name. If number and/or name are not known, use 0 and "" respectively.
            </summary>
            <param name="number"></param>
            <param name="name"></param>
        </member>
        <member name="T:BHoM.Structural.Bar">
            <summary>
            Bar objects for 1D finite element bars. Note, cable elements separate.
            </summary>
        </member>
        <member name="P:BHoM.Structural.Bar.DesignGroupName">
            <summary>
            Design type name for design purposes (e.g. Simple Column). Can be used to help 
            downstream selections/filters but shouldn't be confused with Groups, which are 
            unique to bars (bars and objects can be added to multiple object groups).
            </summary>
        </member>
        <member name="P:BHoM.Structural.Bar.SectionProperty">
            <summary>Section property</summary>
        </member>
        <member name="P:BHoM.Structural.Bar.Material">
            <summary>Material inherited from section property</summary>
        </member>
        <member name="P:BHoM.Structural.Bar.Release">
            <summary>Releases</summary>
        </member>
        <member name="P:BHoM.Structural.Bar.Spring">
            <summary>Spring</summary>
        </member>
        <member name="P:BHoM.Structural.Bar.Line">
            <summary>The line defining the bar centre or location line</summary>
        </member>
        <member name="P:BHoM.Structural.Bar.Length">
            <summary>Bar length</summary>
        </member>
        <member name="P:BHoM.Structural.Bar.OrientationAngle">
            <summary>
            Bar orientation angle. For non-vertical bars, angle is measured in the bar YZ plane
            betwen the Y axis and the Y vector projected one a vertical plane defined by the start and end
            nodes. For vertical bars, angle is measured between the bar Y axis and global Y axis. A bar is 
            vertical if the distance between end points projected to a horizontal plane is less than 0.0001
            </summary>
        </member>
        <member name="P:BHoM.Structural.Bar.Storey">
            <summary>Storey of the building that the bar is assigned to</summary>
            
        </member>
        <member name="M:BHoM.Structural.Bar.#ctor(BHoM.Geometry.Point,BHoM.Geometry.Point,System.String)">
            <summary>
            Construct a bar from BHoM points and name
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <param name="barName"></param>
        </member>
        <member name="M:BHoM.Structural.Bar.#ctor(BHoM.Geometry.Line,System.String)">
            <summary>
            Construct a bar from BHoM line and name
            </summary>
            <param name="line"></param>
            <param name="barName"></param>
        </member>
        <member name="M:BHoM.Structural.Bar.#ctor(BHoM.Structural.Node,BHoM.Structural.Node,System.String)">
            <summary>
            Construct a bar from BHoM nodes and name
            </summary>
            <param name="startNode"></param>
            <param name="endNode"></param>
            <param name="barName"></param>
        </member>
        <member name="M:BHoM.Structural.Bar.GetOppositeNode(BHoM.Structural.Node)">
            <summary>
            Get the node at the opposite end to the known (input) node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.Bar.GetOppositeEnd(BHoM.Geometry.Point)">
            <summary></summary>
        </member>
        <member name="M:BHoM.Structural.Bar.GetGeometry">
            <summary></summary>
        </member>
        <member name="M:BHoM.Structural.Bar.SetGeometry(BHoM.Geometry.GeometryBase)">
            <summary></summary>
        </member>
        <member name="M:BHoM.Structural.Bar.SetStorey(BHoM.Structural.Storey)">
            <summary>
            Set the storey which the bar belongs to
            </summary>
            <param name="storey"></param>
        </member>
        <member name="M:BHoM.Structural.Bar.SetSectionProperty(BHoM.Structural.SectionProperties.SectionProperty)">
            <summary>
            Set the section property name. 
            </summary>
            <param name="sectionProperty"></param>
        </member>
        <member name="M:BHoM.Structural.Bar.SetDesignGroupName(System.String)">
            <summary>
            Set the design group name
            </summary>
            <param name="designGroupName"></param>
        </member>
        <member name="M:BHoM.Structural.Bar.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:BHoM.Structural.Face">
            <summary>
            BHoM Face class
            </summary>
        </member>
        <member name="P:BHoM.Structural.Face.BHoM_Guid">
            <summary>BHoM unique ID</summary>
        </member>
        <member name="P:BHoM.Structural.Face.Number">
            <summary>Face number</summary>
        </member>
        <member name="P:BHoM.Structural.Face.Group">
            <summary>Group number</summary>
        </member>
        <member name="P:BHoM.Structural.Face.Name">
            <summary>Face name</summary>
        </member>
        <member name="P:BHoM.Structural.Face.Nodes">
            <summary>Face nodes</summary>
        </member>
        <member name="P:BHoM.Structural.Face.Edges">
            <summary>Face edges</summary>
        </member>
        <member name="P:BHoM.Structural.Face.Neighbours">
            <summary>Face neighbors</summary>
        </member>
        <member name="M:BHoM.Structural.Face.#ctor">
            <summary>
            Constructs an empty face
            </summary>
        </member>
        <member name="M:BHoM.Structural.Face.#ctor(BHoM.Structural.Node,BHoM.Structural.Node,BHoM.Structural.Node)">
            <summary>
            Constructs a 3 sided face with 3 nodes
            </summary>
            <param name="n0"></param>
            <param name="n1"></param>
            <param name="n2"></param>
        </member>
        <member name="M:BHoM.Structural.Face.#ctor(BHoM.Structural.Node,BHoM.Structural.Node,BHoM.Structural.Node,BHoM.Structural.Node)">
            <summary>
            Constructs a 4 sided face with 4 nodes
            </summary>
            <param name="n0"></param>
            <param name="n1"></param>
            <param name="n2"></param>
            <param name="n3"></param>
        </member>
        <member name="M:BHoM.Structural.Face.CalculateCentroid">
            <summary>Calculates the centroid of the face</summary>
        </member>
        <member name="M:BHoM.Structural.Face.DistanceTo(BHoM.Geometry.Point)">
            <summary>Get the distance to the centroid from point p</summary>
        </member>
        <member name="T:BHoM.Structural.Node">
            <summary>
            Node objects
            </summary>
        </member>
        <member name="P:BHoM.Structural.Node.Point">
            <summary>
            Node Number
            </summary>
            <summary>Node position as a point object</summary>
        </member>
        <member name="P:BHoM.Structural.Node.Constraint">
            <summary>Node constraint (support/restraint)</summary>
        </member>
        <member name="P:BHoM.Structural.Node.IsConstrained">
            <summary>Returns true is node is constrained</summary>
        </member>
        <member name="P:BHoM.Structural.Node.ConstraintName">
            <summary>Constraint name - is inherited from constraint object if exists</summary>
        </member>
        <member name="P:BHoM.Structural.Node.ConnectedBars">
            <summary>Bars connected to the node</summary>
        </member>
        <member name="P:BHoM.Structural.Node.ConnectedFaces">
            <summary>Faces connected to the node</summary>
        </member>
        <member name="P:BHoM.Structural.Node.Valence">
            <summary>Valence of node</summary>
        </member>
        <member name="P:BHoM.Structural.Node.BarAbsoluteAngles">
            <summary>Absolute angles between connected bars (direct measurement of bar vectors)</summary>
        </member>
        <member name="P:BHoM.Structural.Node.BarDeltaAngles">
            <summary>Delta angles between connected bars measured in the node plane</summary>
        </member>
        <member name="P:BHoM.Structural.Node.BarThetaAngles">
            <summary>Theta angles between connected bars measured in the node plane</summary>
        </member>
        <member name="P:BHoM.Structural.Node.Plane">
            <summary>Node plane for angular and setting out methods</summary>
        </member>
        <member name="M:BHoM.Structural.Node.#ctor(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Constructes a node from CartesianCoordinates and a name
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="name"></param>
        </member>
        <member name="M:BHoM.Structural.Node.#ctor(BHoM.Geometry.Point,System.String)">
            <summary>
            Constructes a node from a BHoM point and a name
            </summary>
            <param name="point"></param>
            <param name="name"></param>
        </member>
        <member name="P:BHoM.Structural.Node.IsValid">
            <summary>
            Returns true if node is valid (number less than 0 or position is invalid)
            </summary>
        </member>
        <member name="M:BHoM.Structural.Node.GetGeometry">
            <summary></summary>
        </member>
        <member name="M:BHoM.Structural.Node.SetGeometry(BHoM.Geometry.GeometryBase)">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.Node.CartesianCoordinates">
            <summary>
            Gets or sets the CartesianCoordinates of the node position
            </summary>
        </member>
        <member name="P:BHoM.Structural.Node.X">
            <summary>
            Gets or sets the X value of the node position
            </summary>
        </member>
        <member name="P:BHoM.Structural.Node.Y">
            <summary>
            Gets or sets the Y value of the node position
            </summary>
        </member>
        <member name="P:BHoM.Structural.Node.Z">
            <summary>
            Gets or sets the Z value of the node position
            </summary>
        </member>
        <member name="M:BHoM.Structural.Node.DistanceTo(BHoM.Structural.Node)">
            <summary>
            Calculates the distance from the input node to this
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.Node.SetName(System.String)">
            <summary>
            Sets the name of the node
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:BHoM.Structural.Node.SetConstraint(BHoM.Structural.NodeConstraint)">
            <summary>
            Sets the constraint of a node
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:BHoM.Structural.Node.SetConstraintName(System.String)">
            <summary>
            Sets the constraint name of the node
            </summary>
            <param name="constraintName"></param>
        </member>
        <member name="M:BHoM.Structural.Node.SetCartesianCoordinatesystemAsDefault">
            <summary>
            Sets a default plane as coordinate system
            </summary>
        </member>
        <member name="M:BHoM.Structural.Node.SetPlane(BHoM.Geometry.Plane)">
            <summary>
            Sets coordinate system as plane
            </summary>
            <param name="plane"></param>
        </member>
        <member name="M:BHoM.Structural.Node.ResetTopology">
            <summary>
            Resets the topology by removing connected bars and setting valence to 0
            </summary>
        </member>
        <member name="M:BHoM.Structural.Node.AddBar(BHoM.Structural.Bar)">
            <summary>
            Add a bar instance into connected bar list
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:BHoM.Structural.Node.AddFace(BHoM.Structural.Face)">
            <summary>
            Add a face instance into connected face list
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:BHoM.Structural.Node.SortConnectedBars">
            <summary>
            WIP
            </summary>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.Node.SortBarsByAngle(System.Collections.Generic.List{BHoM.Structural.Bar},System.Collections.Generic.List{System.Double})">
            <summary>
            WIP - change to use sorted dictionary
            Sort the bars by angle, smallest angle first.
            Assumes one to one mapping of bars to angles in two lists
            </summary>
            <param name="bars"></param>
            <param name="angles"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.Node.SetAngles(System.Collections.Generic.List{System.Double})">
            <summary>
            WIP
            </summary>
            <returns></returns>
        </member>
        <member name="T:BHoM.Structural.BarRelease">
            <summary>
            Bar release applicable to bar objects, contains BHoM.Structural.Constraint objects
            for the start and end of a bar
            </summary>
        </member>
        <member name="P:BHoM.Structural.BarRelease.StartConstraint">
            <summary>Start constraint</summary>
        </member>
        <member name="P:BHoM.Structural.BarRelease.EndConstraint">
            <summary>End constraint</summary>
        </member>
        <member name="M:BHoM.Structural.BarRelease.#ctor(BHoM.Structural.NodeConstraint,BHoM.Structural.NodeConstraint)">
            <summary>Construct a new constraint using constraint objects for start/end releases</summary>
        </member>
        <member name="M:BHoM.Structural.BarRelease.#ctor(BHoM.Structural.NodeConstraint,BHoM.Structural.NodeConstraint,System.String)">
            <summary>Construct a new constraint using constraint objects for start/end releases and name</summary>          
        </member>
        <member name="T:BHoM.Structural.Offset">
            <summary>
            Offsets for bars
            </summary>
        </member>
        <member name="P:BHoM.Structural.Offset.Name">
            <summary>Offset name</summary>
        </member>
        <member name="P:BHoM.Structural.Offset.Offsets">
            <summary>Offset array</summary>
        </member>
        <member name="M:BHoM.Structural.Offset.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct an offset by values
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="xx"></param>
            <param name="yy"></param>
            <param name="zz"></param>
        </member>
        <member name="M:BHoM.Structural.Offset.SetName(System.String)">
            <summary>
            Set the offset name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:BHoM.Structural.Structure">
            <summary>
            Structure class represents a collection of structural objects
            </summary>
        </member>
        <member name="P:BHoM.Structural.Structure.Number">
            <summary>Structure number</summary>
        </member>
        <member name="P:BHoM.Structural.Structure.Name">
            <summary>Structure name</summary>
        </member>
        <member name="P:BHoM.Structural.Structure.Storeys">
            <summary>Dictionary of storeys</summary>
        </member>
        <member name="P:BHoM.Structural.Structure.Tolerance">
            <summary>Tolerance of structure for node merge etc</summary>
        </member>
        <member name="M:BHoM.Structural.Structure.SortNodalFaces">
            <summary>
            Sort nodal faces
            </summary>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.Structure.SetName(System.String)">
            <summary>Sets the structure name</summary>
        </member>
        <member name="M:BHoM.Structural.Structure.SetNumber(System.Int32)">
            <summary>
            Set the structure number
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:BHoM.Structural.Structure.SetTolerance(System.Double)">
            <summary>
            Sets the internal tolerance for which structural node merging etc. will be performed
            </summary>
            <param name="tol"></param>
        </member>
        <member name="T:BHoM.Structural.BarStructuralUsage">
            <summary>Usage of the bar for downstream implementations</summary>
        </member>
        <member name="F:BHoM.Structural.BarStructuralUsage.Beam">
            <summary>Beam</summary>
        </member>
        <member name="F:BHoM.Structural.BarStructuralUsage.Column">
            <summary>Column</summary>
        </member>
        <member name="F:BHoM.Structural.BarStructuralUsage.Brace">
            <summary>Brace</summary>
        </member>
        <member name="F:BHoM.Structural.BarStructuralUsage.Cable">
            <summary>Cable</summary>
        </member>
        <member name="T:BHoM.Structural.ManufactureType">
            <summary>Manufacture type for steel</summary>
        </member>
        <member name="F:BHoM.Structural.ManufactureType.Rolled">
            <summary>Rolled steel section</summary>
        </member>
        <member name="F:BHoM.Structural.ManufactureType.WeldedIBeam">
            <summary>Welded steel I-section</summary>
        </member>
        <member name="F:BHoM.Structural.ManufactureType.ColdFormed">
            <summary>Cold formed hollow section</summary>
        </member>
        <member name="F:BHoM.Structural.ManufactureType.HotFinished">
            <summary>Hot finished hollow section</summary>
        </member>
        <member name="F:BHoM.Structural.ManufactureType.WeldedBox">
            <summary>Welded steel box section</summary>
        </member>
        <member name="F:BHoM.Structural.ManufactureType.unknown">
            <summary>Not known</summary>
        </member>
        <member name="T:BHoM.Structural.BucklingCurve">
            <summary>Steel strut buckling curves</summary>
        </member>
        <member name="F:BHoM.Structural.BucklingCurve.a0">
            <summary>a0</summary>
        </member>
        <member name="F:BHoM.Structural.BucklingCurve.a">
            <summary>a</summary>
        </member>
        <member name="F:BHoM.Structural.BucklingCurve.b">
            <summary>b</summary>
        </member>
        <member name="F:BHoM.Structural.BucklingCurve.c">
            <summary>c</summary>
        </member>
        <member name="F:BHoM.Structural.BucklingCurve.d">
            <summary>d</summary>
        </member>
        <member name="F:BHoM.Structural.BucklingCurve.unknown">
            <summary>Not Known</summary>
        </member>
        <member name="T:BHoM.Structural.ShearType">
            <summary>Shear type</summary>
        </member>
        <member name="F:BHoM.Structural.ShearType.a">
            <summary>a</summary>
        </member>
        <member name="F:BHoM.Structural.ShearType.b">
            <summary>b</summary>
        </member>
        <member name="F:BHoM.Structural.ShearType.c1">
            <summary>c1</summary>
        </member>
        <member name="F:BHoM.Structural.ShearType.c2">
            <summary>c2</summary>
        </member>
        <member name="F:BHoM.Structural.ShearType.d">
            <summary>d</summary>
        </member>
        <member name="F:BHoM.Structural.ShearType.e">
            <summary>e</summary>
        </member>
        <member name="F:BHoM.Structural.ShearType.f1">
            <summary>f1</summary>
        </member>
        <member name="F:BHoM.Structural.ShearType.f2">
            <summary>f2</summary>
        </member>
        <member name="F:BHoM.Structural.ShearType.g">
            <summary>g</summary>
        </member>
        <member name="T:BHoM.Structural.SectionClass">
            <summary>Section classification</summary>
        </member>
        <member name="F:BHoM.Structural.SectionClass.c1">
            <summary>c1</summary>
        </member>
        <member name="F:BHoM.Structural.SectionClass.c2">
            <summary>c2</summary>
        </member>
        <member name="F:BHoM.Structural.SectionClass.c3">
            <summary>c3</summary>
        </member>
        <member name="F:BHoM.Structural.SectionClass.c4">
            <summary>c4</summary>
        </member>
        <member name="F:BHoM.Structural.SectionClass.unknown">
            <summary>Not known</summary>
        </member>
        <member name="T:BHoM.Structural.AxisDirection">
            <summary>Axis direction for any application (loads, results, geometry
            all cartesian coordinate systems follow the right hand rule</summary>
        </member>
        <member name="F:BHoM.Structural.AxisDirection.X">
            <summary>X direction</summary>
        </member>
        <member name="F:BHoM.Structural.AxisDirection.Y">
            <summary>Y direction</summary>
        </member>
        <member name="F:BHoM.Structural.AxisDirection.Z">
            <summary>Z direction</summary>
        </member>
        <member name="F:BHoM.Structural.AxisDirection.XX">
            <summary>Clockwise rotation about X-Axis looking in positive X direction</summary>
        </member>
        <member name="F:BHoM.Structural.AxisDirection.YY">
            <summary>Clockwise rotation about Y-Axis looking in positive Y direction</summary>
        </member>
        <member name="F:BHoM.Structural.AxisDirection.ZZ">
            <summary>Clockwise rotation about Z-Axis looking in positive Z direction</summary>
        </member>
        <member name="T:BHoM.Structural.DOFType">
            <summary>
            Enumerator of types of degrees of freedom
            </summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.Free">
            <summary>Free - all DOF's released</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.Fixed">
            <summary>Fixed - all DOF's blocked</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.FixedNegative">
            <summary>Zero stiffness in the positive direction</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.FixedPositive">
            <summary>Zero stiffness in the negative direction</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.Spring">
            <summary>Linear spring constant</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.SpringNegative">
            <summary>Non-linear, zero stiffnss in positive direction</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.SpringPositive">
            <summary>Non-linear, zero stiffness in negative direction</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.SpringRelative">
            <summary>Spring stiffness between 0-1 relates to the element to which the DOF applies (e.g. bar end stiffness)</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.SpringRelativeNegative">
            <summary>As spring negative, but relative stiffness</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.SpringRelativePositive">
            <summary>As spring positive but relative stiffness</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.NonLinear">
            <summary>Non-linear spring model</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.Friction">
            <summary>Friction model (relative to the load applied)</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.Damped">
            <summary>Damped velocities/accelerations</summary>
        </member>
        <member name="F:BHoM.Structural.DOFType.Gap">
            <summary>Gap model</summary>
        </member>
        <member name="T:BHoM.Structural.ConstraintType">
            <summary>Constraint type</summary>
        </member>
        <member name="F:BHoM.Structural.ConstraintType.Restraint">
            <summary>Restraint (e.g. node resraint)</summary>
        </member>
        <member name="F:BHoM.Structural.ConstraintType.Release">
            <summary>Release (e.g. bar end releases)</summary>
        </member>
        <member name="F:BHoM.Structural.ConstraintType.Rigid">
            <summary>Rigid (e.g. rigid links)</summary>
        </member>
        <member name="F:BHoM.Structural.ConstraintType.Compatibility">
            <summary>Compatibility (e.g. compatible nodes)</summary>
        </member>
        <member name="T:BHoM.Structural.DesignCodes.ElementDesign.RCBeamCheck">
            <summary>
            RCBeamCheck is an object that stores design check information for a single bar, 
            loadcase and calculation point
            </summary>
        </member>
        <member name="T:BHoM.Structural.Loads.AreaUniformalyDistributedLoad">
            <summary>
            Uniformly distributed area load
            </summary>
        </member>
        <member name="T:BHoM.Structural.Loads.AreaVaryingDistributedLoad">
            <summary>
            Varying load distributed over an area
            </summary>
        </member>
        <member name="T:BHoM.Structural.Loads.BarPointLoad">
            <summary>
            Gravity load
            </summary>  
            <summary>
            Point load along a bar
            </summary>
        </member>
        <member name="T:BHoM.Structural.Loads.BarTemperatureLoad">
            <summary>
            bar temperature load class
            </summary>
        </member>
        <member name="T:BHoM.Structural.Loads.BarVaryingDistributedLoad">
            <summary>
            Varying load on a bar
            </summary>
        </member>
        <member name="T:BHoM.Structural.Loads.BarPrestressLoad">
            <summary>
            Prestress load on a bar
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.GeometricalAreaLoad.Force">
            <summary>Force - fx, fy, fz defined as a BHoM.Geometry.Vector</summary>
        </member>
        <member name="P:BHoM.Structural.Loads.GeometricalLineLoad.ForceA">
            <summary>Force - fx, fy, fz defined as a BHoM.Geometry.Vector</summary>
        </member>
        <member name="T:BHoM.Structural.Loads.ILoad">
            <summary>
            Interface implemented by all loading related classes
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.ILoad.Loadcase">
            <summary>Loadcase as BHoM object</summary>
        </member>
        <member name="T:BHoM.Structural.Loads.Load`1">
            <summary>
            Nodal load class. Use NodalLoad() to construct an empty instance, then use the Set methods to set forces, moments etc. A second
            constructor allows for a default force and moment nodal load instance.
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.Load`1.Loadcase">
            <summary>Loadcase as BHoM object</summary>
        </member>
        <member name="P:BHoM.Structural.Loads.Load`1.Objects">
            <summary>A list of structural elements that the nodal load is applicable to</summary>
        </member>
        <member name="T:BHoM.Structural.Loads.ICase">
            <summary>
            Loadcase class 
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.ICase.Number">
            <summary>Loadcase number</summary>
        </member>
        <member name="P:BHoM.Structural.Loads.ICase.CaseType">
            <summary>
            Case Type
            </summary>
        </member>
        <member name="T:BHoM.Structural.Loads.Loadcase">
            <summary>
            Simple Loadcase class
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.Loadcase.Nature">
            <summary>
            Gets or Sets the loading nature of the loadcase
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.Loadcase.SelfWeightMultiplier">
            <summary>
            Gets or sets the selfweight multiplier of the loadcase
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.Loadcase.LoadRecords">
            <summary>
            Collection of nodes that are applied under this loadcase
            </summary>
            <returns></returns>
        </member>
        <member name="P:BHoM.Structural.Loads.Loadcase.CaseType">
            <summary>
            Gets the Case type of loadcase
            </summary>
        </member>
        <member name="M:BHoM.Structural.Loads.Loadcase.#ctor(System.Int32,System.String,BHoM.Structural.Loads.LoadNature,System.Double)">
            <summary>
            
            </summary>
            <param name="number">LC number</param>
            <param name="name">LC name</param>
            <param name="nature">Loading nature</param>
            <param name="selfWeightMultiplier"></param>
        </member>
        <member name="T:BHoM.Structural.Loads.LoadCombination">
            <summary>
            Loadcombination, different to loadcase as combination also contains information
            on the combinations of loads with load factors
            </summary>
        </member>
        <member name="T:BHoM.Structural.Loads.PointForce">
            <summary>
            Nodal load class. Use NodalLoad() to construct an empty instance, then use the Set methods to set forces, moments etc. A second
            constructor allows for a default force and moment nodal load instance.
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointForce.Force">
            <summary>Force - fx, fy, fz defined as a BHoM.Geometry.Vector</summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointForce.Moment">
            <summary>Moment - mx, my, mz defined as a BHoM.Geometry.Vector</summary>
        </member>
        <member name="M:BHoM.Structural.Loads.PointForce.#ctor">
            <summary>
            Create an empty nodal load as a placeholder
            </summary>
        </member>
        <member name="M:BHoM.Structural.Loads.PointForce.#ctor(BHoM.Structural.Loads.Loadcase,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new nodal load containing forces and moments. This is the only constructor that sets the nodal force
            values. For all other nodal load types (displacement, velocity etc) use the relevant Set method.
            </summary>
            <param name="loadcase"></param>
            <param name="fx"></param>
            <param name="fy"></param>
            <param name="fz"></param>
            <param name="mx"></param>
            <param name="my"></param>
            <param name="mz"></param>
        </member>
        <member name="M:BHoM.Structural.Loads.PointForce.SetForce(System.Double,System.Double,System.Double)">
            <summary>
            Set the forces of a nodal load
            </summary>
            <param name="fx"></param>
            <param name="fy"></param>
            <param name="fz"></param>
        </member>
        <member name="M:BHoM.Structural.Loads.PointForce.SetMoment(System.Double,System.Double,System.Double)">
            <summary>
            Set the moments of a nodal load
            </summary>
            <param name="mx"></param>
            <param name="my"></param>
            <param name="mz"></param>
        </member>
        <member name="T:BHoM.Structural.Loads.PointDisplacement">
            <summary>
            Point Displacement class
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointDisplacement.Translation">
            <summary>Translation - tx, ty, tz defined as a BHoM.Geometry.Vector</summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointDisplacement.Rotation">
            <summary>Rotation - rx, ry, rz defined as a BHoM.Geometry.Vector</summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointDisplacement.RobotLoadRecordNumber">
            <summary>Stores a load record number specific to Robot</summary>
        </member>
        <member name="M:BHoM.Structural.Loads.PointDisplacement.#ctor">
            <summary>
            Create an empty nodal load as a placeholder
            </summary>
        </member>
        <member name="M:BHoM.Structural.Loads.PointDisplacement.#ctor(BHoM.Structural.Loads.Loadcase,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new nodal load containing forces and moments. This is the only constructor that sets the nodal force
            values. For all other nodal load types (displacement, velocity etc) use the relevant Set method.
            </summary>
            <param name="loadcase"></param>
            <param name="fx"></param>
            <param name="fy"></param>
            <param name="fz"></param>
            <param name="mx"></param>
            <param name="my"></param>
            <param name="mz"></param>
        </member>
        <member name="T:BHoM.Structural.Loads.PointVelocity">
            <summary>
            Point Velocity class
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointVelocity.TranslationalVelocity">
            <summary>TranslationalVelocity - vx, vy, vz defined as a BHoM.Geometry.Vector</summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointVelocity.RotationalVelocity">
            <summary>RotationalVelocity - vrx, vry, vrz defined as a BHoM.Geometry.Vector</summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointVelocity.RobotLoadRecordNumber">
            <summary>Stores a load record number specific to Robot</summary>
        </member>
        <member name="M:BHoM.Structural.Loads.PointVelocity.#ctor">
            <summary>
            Create an empty nodal load as a placeholder
            </summary>
        </member>
        <member name="M:BHoM.Structural.Loads.PointVelocity.#ctor(BHoM.Structural.Loads.Loadcase,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new nodal load containing forces and moments. This is the only constructor that sets the nodal force
            values. For all other nodal load types (displacement, velocity etc) use the relevant Set method.
            </summary>
            <param name="loadcase"></param>
            <param name="fx"></param>
            <param name="fy"></param>
            <param name="fz"></param>
            <param name="mx"></param>
            <param name="my"></param>
            <param name="mz"></param>
        </member>
        <member name="T:BHoM.Structural.Loads.PointAcceleration">
            <summary>
            Point Acceleration class
            </summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointAcceleration.TranslationalAcceleration">
            <summary>TranslationalAcceleration - ax, ay, az defined as a BHoM.Geometry.Vector</summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointAcceleration.RotationalAcceleration">
            <summary>RotationalAcceleration - arx, ary, arz defined as a BHoM.Geometry.Vector</summary>
        </member>
        <member name="P:BHoM.Structural.Loads.PointAcceleration.RobotLoadRecordNumber">
            <summary>Stores a load record number specific to Robot</summary>
        </member>
        <member name="M:BHoM.Structural.Loads.PointAcceleration.#ctor">
            <summary>
            Create an empty nodal load as a placeholder
            </summary>
        </member>
        <member name="M:BHoM.Structural.Loads.PointAcceleration.#ctor(BHoM.Structural.Loads.Loadcase,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new nodal load containing forces and moments. This is the only constructor that sets the nodal force
            values. For all other nodal load types (displacement, velocity etc) use the relevant Set method.
            </summary>
            <param name="loadcase"></param>
            <param name="fx"></param>
            <param name="fy"></param>
            <param name="fz"></param>
            <param name="mx"></param>
            <param name="my"></param>
            <param name="mz"></param>
        </member>
        <member name="T:BHoM.Structural.Results.Bars.BarForceEnvelope">
            <summary>
            Envelope of bar forces representing the minima and maxima forces and principle
            stresses of a collection of bar forces
            </summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.BarNumbers">
            <summary>Associated bar number</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.ForcePositions">
            <summary>Position along the bar of the force</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.LoadcaseNumbers">
            <summary>Associated loadcase number</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.LoadcaseNames">
            <summary>Associated loadcase name</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.FXMax">
            <summary>Governing case number</summary>
            <summary>Maximum axial force, tension negative</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.FXMin">
            <summary>Minimum axial force, tension negative</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.FYMax">
            <summary>Maximum shear force, minor axis</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.FYMin">
            <summary>Minimum shear force, minor axis</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.FZMax">
            <summary>Maximum shear force, major axis</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.FZMin">
            <summary>Minimum shear force, major axis</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.MXMax">
            <summary>Maximum torsion</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.MXMin">
            <summary>Minimum torsion</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.MYMax">
            <summary>Maximum bending moment, minor axis</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.MYMin">
            <summary>Minimum bending moment, minor axis</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.MZMax">
            <summary>Maximum bending moment, major axis</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.MZMin">
            <summary>Minimum bending moment, major axis</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.SMax">
            <summary>Maximum principle stress</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.SMin">
            <summary>Minimum principle stress</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.OrientationPlane">
            <summary>Orientation of bar forces inherited from bar</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceEnvelope.UserData">
            <summary>User text field for any user data</summary>
        </member>
        <member name="T:BHoM.Structural.Results.Bars.BarForceCollection">
            <summary>
            Collection of bar forces, defines a set of bar forces with the
            ability to get and set envelopes
            </summary>
        </member>
        <member name="P:BHoM.Structural.Results.Bars.BarForceCollection.barForceDictionary">
            <summary>Bar force dictionary which forms the collection</summary>
        </member>
        <member name="M:BHoM.Structural.Results.Bars.BarForceCollection.#ctor">
            <summary>Constructs and empty bar force collection</summary>
        </member>
        <member name="M:BHoM.Structural.Results.Bars.BarForceCollection.GenerateKey(BHoM.Structural.Results.Bars.BarForce,System.Double)">
            <summary>Generates a key from a bar force object</summary>
        </member>
        <member name="M:BHoM.Structural.Results.Bars.BarForceCollection.Add(BHoM.Structural.Results.Bars.BarForce,System.Double)">
            <summary>Add a bar force to a collection</summary>
        </member>
        <member name="T:BHoM.Structural.Results.Bars.BarForce">
            <summary>
            Bar force object contains a set of coexisting forces, bar reference
            and orientation information
            </summary>
            
        </member>
        <member name="P:BHoM.Structural.Results.ResultServer`1.NameSelection">
            <summary>
            Sets the Names of the results to load, if left blank all bar names will be loaded
            </summary>
        </member>
        <member name="P:BHoM.Structural.Results.ResultServer`1.LoadcaseSelection">
            <summary>
            Sets the names of the loadcases to load, if left blank all loadcases will be loaded
            </summary>
        </member>
        <member name="P:BHoM.Structural.Results.ResultServer`1.TimeStepSelection">
            <summary>
            Sets the names of the time steps to load, if left blank all bar names will be loaded
            </summary>
        </member>
        <member name="T:BHoM.Structural.Results.Building.StoreyResult">
            <summary>
            Results for building storeys for use in multi/tall building post processing
            </summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.Loadcase">
            <summary>Loadcase as BHoM object</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.DriftX">
            <summary>Storey drift in X (refer to ASCE7 for basis)</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.DriftY">
            <summary>Storey drift in Y (refer to ASCE7 for basis)</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.DriftRatioX">
            <summary>Storey drift ratio in X (drift / storey height)</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.DriftRatioY">
            <summary>Storey drift ratio in Y (drift / storey height)</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.MaximumNodalDisplacementX">
            <summary>Maximum displacement in X of any point (node) in the story</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.MaximumNodalDisplacementY">
            <summary>Maximum displacement in Y of any point (node) in the story</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.MinimumNodalDisplacementX">
            <summary>Minimum displacement in X of any point (node) in the story</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.MinimumNodalDisplacementY">
            <summary>Minimum displacement in Y of any point (node) in the story</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.ShearX">
            <summary>Storey shear in X</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.ShearY">
            <summary>Storey shear in Y</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.ShearToColumnsX">
            <summary>Total shear force in X in storey columns</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.ShearToColumnsY">
            <summary>Total shear force in Y in storey columns</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.ShearToWallsX">
            <summary>Total shear force in X in storey walls</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.ShearToWallsY">
            <summary>Total shear force in Y in storey walls</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.AxialToColumns">
            <summary>Total axial force in columns at level</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.AxialToWalls">
            <summary>Total axial force in walls at level</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.SeismicMass">
            <summary>Mass of storey used in seismic calculation</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.CentreOfRigidity">
            <summary>Centre of rigidity of the storey</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.CentreOfGravity">
            <summary>Centre of mass of the storey</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.Eccentricity">
            <summary>Eccentricity of the storey (vector distance between COG and COR)</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Building.StoreyResult.MomentOfInertia">
            <summary>Moment of inertia of a storey</summary>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.#ctor">
            <summary>
            Constructs an empty storey result and set the objects later
            </summary>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.#ctor(BHoM.Structural.Loads.Loadcase)">
            <summary>
            Constructs a storey result using a BHoM loadcase object
            </summary>
            <param name="loadcase"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetLoadcase(BHoM.Structural.Loads.Loadcase)">
            <summary>
            Sets the loadcase by using an existing BHoM loadcase object
            </summary>
            <param name="loadcase"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetDrift(System.Double,System.Double)">
            <summary>
            Set storey drifts
            </summary>
            <param name="driftX"></param>
            <param name="driftY"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetDriftRatio(System.Double,System.Double)">
            <summary>
            Sets storey drift ratios
            </summary>
            <param name="driftRatioX"></param>
            <param name="driftRatioY"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetMaximumNodalDisplacements(System.Double,System.Double)">
            <summary>
            Sets the maximum nodal displacements for a given storey
            (maximum nodal translations)
            </summary>
            <param name="maxUX"></param>
            <param name="maxUY"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetMinimumNodalDisplacements(System.Double,System.Double)">
            <summary>
            Sets the Minimum nodal displacements for a given storey
            (Minimum nodal translations)
            </summary>
            <param name="minUX"></param>
            <param name="minUY"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetShear(System.Double,System.Double)">
            <summary>
            Sets storey shears
            </summary>
            <param name="shearX"></param>
            <param name="shearY"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetShearDistribution(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the total shear forces in walls and columns for a given storey
            (to show relative distribution)
            </summary>
            <param name="shearToColumnsX"></param>
            <param name="shearToColumnsY"></param>
            <param name="shearToWallsX"></param>
            <param name="shearToWallsY"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetAxialDistribution(System.Double,System.Double)">
            <summary>
            Sets the total axial forces in walls and columns for a given storey
            (to show relative distribution)
            </summary>
            <param name="axialToColumns"></param>
            <param name="axialToWalls"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetSeismicMass(System.Double,System.Double,System.Double)">
            <summary>
            Sets the seismic mass for a given storey by constructing a BHoM
            vector object
            </summary>
            <param name="massX"></param>
            <param name="massY"></param>
            <param name="massZ"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetCentreOfRigidity(System.Double,System.Double,System.Double)">
            <summary>
            Sets the centre of rigidity of a given storey by constructing 
            a BHoM point object
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetCentreOfGravity(System.Double,System.Double,System.Double)">
            <summary>
            Sets the centre of gravity of a given storey by constructing
            a BHoM point object
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetEccentricity(System.Double,System.Double,System.Double)">
            <summary>
            Sets the eccentricity (distance between COG and COR) for a
            given storey by constructing a BHoM vector object
            </summary>
            <param name="ex"></param>
            <param name="ey"></param>
            <param name="ez"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Building.StoreyResult.SetMomentOfIntertia(System.Double,System.Double,System.Double)">
            <summary>
            Set the moment of inertia
            </summary>
            <param name="ix"></param>
            <param name="iy"></param>
            <param name="iz"></param>
        </member>
        <member name="T:BHoM.Structural.Results.Global.GlobalResult">
            <summary>
            This class is used to collect and inspect results for a 
            whole structure for sanity checks - global reactions, mass sums, shears etc
            </summary>
        </member>
        <member name="P:BHoM.Structural.Results.Global.GlobalResult.Loadcase">
            <summary>Loadcase as BHoM object</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Global.GlobalResult.BaseShearX">
            <summary>Base shear force in X direction (reacion in X as a percentage of total mass)</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Global.GlobalResult.BaseShearY">
            <summary>Base shear force in Y direction (reaction in Y as a percentage of total mass)</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Global.GlobalResult.SumOfReactions_F">
            <summary>Sum of reactions (X, Y, Z) as vector</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Global.GlobalResult.SumOfReactions_M">
            <summary>Sum of reactions (MX, MY, MZ) as vector</summary>
        </member>
        <member name="P:BHoM.Structural.Results.Global.GlobalResult.SumOfMass">
            <summary>Sum of modal masses as vector</summary>
        </member>
        <member name="M:BHoM.Structural.Results.Global.GlobalResult.#ctor">
            <summary>Constructs an empty GlobalResult</summary>
        </member>
        <member name="M:BHoM.Structural.Results.Global.GlobalResult.#ctor(BHoM.Structural.Loads.Loadcase)">
            <summary>
            Constructs a global result using a BHoM loadcase object
            </summary>
            <param name="loadcase"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Global.GlobalResult.SetBaseShear(System.Double,System.Double)">
            <summary>
            Sets the base shear in X and Y for the loadcase
            </summary>
            <param name="vX"></param>
            <param name="vY"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Global.GlobalResult.SetReactions(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the sum of reactions for a given loadcase by constructing 
            two BHoM vector objects (forces and moments)
            </summary>
            <param name="fX"></param>
            <param name="fY"></param>
            <param name="fZ"></param>
            <param name="mX"></param>
            <param name="mY"></param>
            <param name="mZ"></param>
        </member>
        <member name="M:BHoM.Structural.Results.Global.GlobalResult.SetSumOfMass(System.Double)">
            <summary>
            Sets the sum of mass for the given loadcase
            </summary>
            <param name="mass"></param>
        </member>
        <member name="T:BHoM.Structural.Results.Nodes.NodalResultCollection">
            <summary>
            Collection of bar forces, defines a set of bar forces with the
            ability to get and set envelopes
            </summary>
        </member>
        <member name="P:BHoM.Structural.Results.Nodes.NodalResultCollection.internalDict">
            <summary>Nodal result dictionary which forms the collection</summary>
        </member>
        <member name="M:BHoM.Structural.Results.Nodes.NodalResultCollection.#ctor">
            <summary>Constructs and empty nodal result collection</summary>
        </member>
        <member name="M:BHoM.Structural.Results.Nodes.NodalResultCollection.Add(BHoM.Structural.Results.Nodes.NodalResult,System.Double)">
            <summary>Adds a nodal result to the collection, using a key "NodeNumber:timeStep"</summary>
        </member>
        <member name="M:BHoM.Structural.Results.Nodes.NodalResultCollection.TryGetNodalResult(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="nodeNumber"></param>
            <param name="timeStep"></param>
            <returns></returns>
        </member>
        <member name="T:BHoM.Structural.Results.Nodes.NodalResult">
            <summary>
            Nodal Result object contains a set of coexisting forces, node reference
            and orientation information
            </summary>
            
        </member>
        <member name="M:BHoM.Structural.SectionProperties.ShapeBuilder.CreateISecction(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an I Section shape
            </summary>
            <param name="tft">Thickness of top Flange</param>
            <param name="tfw">Width of Top flange</param>
            <param name="bft">Thicknees of bottom flange</param>
            <param name="bfw">With of bottom flange</param>
            <param name="wt">thickness of web</param>
            <param name="wd">depth of web</param>
            <param name="r1">web radius</param>
            <param name="r2">toe radius</param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.ShapeBuilder.CreateTee(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an T Section shape
            </summary>
            <param name="tft">Thickness of Flange</param>
            <param name="tfw">Width of flange</param>
            <param name="wt">thickness of web</param>
            <param name="wd">depth of web</param>
            <param name="r1">web radius</param>
            <param name="r2">toe radius</param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.ShapeBuilder.CreateAngle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="depth"></param>
            <param name="flangeThickness"></param>
            <param name="webThickness"></param>
            <param name="innerRadius"></param>
            <param name="toeRadius"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.ShapeBuilder.CreateRectangle(System.Double,System.Double,System.Double)">
            <summary>
            Create a rectange in the XY plane with it's centre at the origin
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="radius">Radius at sharp edge</param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.ShapeBuilder.CreateBox(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a Box in the XY plane with it's centre at the origin
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="thickness">plate thickness</param>
            <param name="innerRadius">inner radius</param>
            <param name="outerRadius">outer radius</param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.ShapeBuilder.CreateCircle(System.Double)">
            <summary>
            Create a Circle in the XY plane with it's centre at the origin
            </summary>
            <param name="radius">Radius</param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.ShapeBuilder.CreateTube(System.Double,System.Double)">
            <summary>
            Create a hollow tube in the XY plane with it's centre at the origin
            </summary>
            <param name="outerRadius"></param>
            <param name="thickness"></param>
            <returns></returns>
        </member>
        <member name="T:BHoM.Structural.SectionProperties.RCColumnRectangular">
            <summary>
            
            </summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.RCColumnRectangular.Description">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.RCColumnRectangular.MassPerMetre">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.RCColumnRectangular.Material">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.RCColumnRectangular.Name">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.RCColumnRectangular.Type">
            <summary></summary>
        </member>
        <member name="T:BHoM.Structural.SectionProperties.RCBeamRectangular">
            <summary>
            
            </summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.RCBeamRectangular.Description">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.RCBeamRectangular.MassPerMetre">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.RCBeamRectangular.Material">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.RCBeamRectangular.Name">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.RCBeamRectangular.Type">
            <summary></summary>
        </member>
        <member name="T:BHoM.Structural.SectionProperties.SectionProperty">
            <summary>
            Section property class, the parent abstract class for all structural 
            sections (RC, steel, PT beams, columns, bracing). Properties defined in this 
            parent class are those that would populate a multi category section database only
            </summary>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SectionProperty.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SectionProperty.#ctor(BHoM.Structural.SectionProperties.ShapeType,BHoM.Structural.SectionProperties.SectionType,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a section property from standard input values
            </summary>
            <param name="sType">Shape type</param>
            <param name="mType">Material type</param>
            <param name="height">Total Height</param>
            <param name="width">Total width</param>
            <param name="t1">Flange Thickness</param>
            <param name="t2">Web Thickness</param>
            <param name="r1">Radius 1</param>
            <param name="r2">Radius 2</param>
            <param name="mass">Mass per metre</param>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SectionProperty.#ctor(BHoM.Geometry.Group{BHoM.Geometry.Curve},BHoM.Structural.SectionProperties.ShapeType,BHoM.Structural.SectionProperties.SectionType)">
            <summary>
            Create a section property from a list of edges, shape type and material
            </summary>
            <param name="edges"></param>
            <param name="sType"></param>
            <param name="mType"></param>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Edges">
            <summary>
            Geometry of the cross section
            </summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.MassPerMetre">
            <summary>Mass per metre based on section properties</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Area">
            <summary>Explicitly defined area</summary>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SectionProperty.LoadFromDB(BHoM.Global.Project,System.String)">
            <summary>
            Searches for the input name in the selected database and returns the corresponding section
            </summary>
            <param name="name">Name of section to search for</param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SectionProperty.CreateISection(BHoM.Structural.SectionProperties.SectionType,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an I Shaped section property
            </summary>
            <param name="mType"></param>
            <param name="widthTopFlange"></param>
            <param name="widthBotFlange"></param>
            <param name="totalDepth"></param>
            <param name="flangeThicknessTop"></param>
            <param name="flangeThicknessBot"></param>
            <param name="webThickness"></param>
            <param name="webRadius"></param>
            <param name="toeRadius"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SectionProperty.CreateRectangularSection(BHoM.Structural.SectionProperties.SectionType,System.Double,System.Double,System.Double)">
            <summary>
            Create a rectangular shaped section
            </summary>
            <param name="mType"></param>
            <param name="height"></param>
            <param name="width"></param>
            <param name="outerRadius"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SectionProperty.CreateAngleSection(BHoM.Structural.SectionProperties.SectionType,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an angle section
            </summary>
            <param name="mType"></param>
            <param name="height"></param>
            <param name="width"></param>
            <param name="flangeThickness"></param>
            <param name="webThickness"></param>
            <returns></returns>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SectionProperty.CreateCircularSection(BHoM.Structural.SectionProperties.SectionType,System.Double)">
            <summary>
            create a circular section
            </summary>
            <param name="mType"></param>
            <param name="diameter"></param>
            <returns></returns>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Shape">
            <summary>Section type</summary>
            
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.SectionMaterial">
            <summary>
            Type of material
            </summary>
            
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Orientation">
            <summary>
            Orientation
            </summary>
            
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.GrossArea">
            <summary>Cross sectional area</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.TotalDepth">
            <summary>
            Total height of section
            </summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.TotalWidth">
            <summary>
            Total width of section
            </summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Ix">
            <summary>Second moment of inertia about the major axis</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Iy">
            <summary>Second moment of inertia about the minor axis</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.J">
            <summary>Torsion Constant</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Sx">
            <summary>
            Plastic Section modulus about the major axis
            </summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Sy">
            <summary>
            Plastic Section modulus about the minor axis
            </summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Zx">
            <summary>
            Elastic Section modulus about the major axis
            </summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Zy">
            <summary>
            Plastic Section modulus about the minor axis
            </summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SectionProperty.Description">
            <summary>Information regarding section property type for the user</summary>
            
        </member>
        <member name="T:BHoM.Structural.SectionProperties.SteelUCSection">
            <summary>
            
            </summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelUCSection.TopFlangeWidth">
            <summary>Top flange width</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelUCSection.BottomFlangeWidth">
            <summary>Bottom flange width</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelUCSection.Depth">
            <summary>Section depth (height)</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelUCSection.TopFlangeThickness">
            <summary>Top flange thickness</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelUCSection.BottomFlangeThickness">
            <summary>Bottom flange thickness</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelUCSection.WebThickness">
            <summary>Web thickness</summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelUCSection.RootRadius">
            <summary>Root radius</summary>
        </member>
        <member name="T:BHoM.Structural.SectionProperties.SteelBoxSection">
            <summary>
            
            </summary>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SteelBoxSection.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelBoxSection.BottomFlangeThickness">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelBoxSection.BottomFlangeWidth">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelBoxSection.Depth">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelBoxSection.RootRadius">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelBoxSection.TopFlangeThickness">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelBoxSection.TopFlangeWidth">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelBoxSection.WebThicknessLeft">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelBoxSection.WebThicknessRight">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelBoxSection.Width">
            <summary></summary>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SteelBoxSection.GetProperties">
            <summary>Method which gets a properties dictionary for simple downstream deconstruct</summary>
        </member>
        <member name="T:BHoM.Structural.SectionProperties.SteelISection">
            <summary>
            
            </summary>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SteelISection.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelISection.BottomFlangeThickness">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelISection.BottomFlangeWidth">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelISection.Depth">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelISection.RootRadius">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelISection.TopFlangeThickness">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelISection.TopFlangeWidth">
            <summary></summary>
        </member>
        <member name="P:BHoM.Structural.SectionProperties.SteelISection.WebThickness">
            <summary></summary>
        </member>
        <member name="M:BHoM.Structural.SectionProperties.SteelISection.GetProperties">
            <summary>Method which gets a properties dictionary for simple downstream deconstruct</summary>
        </member>
        <member name="T:BHoM.Structural.SectionTableColumn">
            <summary>
            enums with name/index matching the columns in the section databases
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.Type">
            <summary>
            Section type (ie UC, UB)
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.Shape">
            <summary>
            Shape type 
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.Mass">
            <summary>
            Mass
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.Height">
            <summary>
            Total Height
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.Width">
            <summary>
            total width
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.B1">
            <summary>
            Custom dimension, usually corresponds with top flange width
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.B2">
            <summary>
            Custom dimension, usually corresponds with bottom flange width
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.B3">
            <summary>
            custom dimension
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.TW">
            <summary>
            plate thickness of web
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.TF1">
            <summary>
            Plate thickness of top flange
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.TF2">
            <summary>
            thickness of bot flange
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.r1">
            <summary>
            Radius 1 - web/flange radius in Tee/ISection/angle or outer radius in box/rectangular sections
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.r2">
            <summary>
            Radius 2 - toe or inner radius
            </summary>
        </member>
        <member name="F:BHoM.Structural.SectionTableColumn.Spacing">
            <summary>
            Spacing between double section members
            </summary>
        </member>
        <member name="P:BHoM.Structural.DataBaseAdapter.TableName">
            <summary>
            Set the default table name
            </summary>
        </member>
        <member name="M:BHoM.Structural.DataBaseAdapter.GetTableNames">
            <summary>
            Gets all the tables in the current database
            </summary>
            <returns></returns>
        </member>
        <member name="T:BHoM.Structural.ThicknessProperty">
            <summary>
            Thickness Property
            </summary>
        </member>
        <member name="T:BHoM.Materials.Concrete.Grade_C20">
            <summary>
            Material class for use in all other object classes and namespaces
            </summary>
        </member>
        <member name="P:BHoM.Materials.Concrete.Grade_C20.Index">
            <summary>Index</summary>
        </member>
        <member name="P:BHoM.Materials.Concrete.Grade_C20.Name">
            <summary>Name</summary>
        </member>
        <member name="P:BHoM.Materials.Concrete.Grade_C20.DampingRatio">
            <summary>Damping ratio</summary>
        </member>
        <member name="P:BHoM.Materials.Concrete.Grade_C20.DryDensity">
            <summary>Dry density</summary>
        </member>
        <member name="P:BHoM.Materials.Concrete.Grade_C20.YoungsModulus">
            <summary>Youngs Modulus</summary>
        </member>
        <member name="P:BHoM.Materials.Concrete.Grade_C20.PoissonsRatio">
            <summary>Poissons ratio</summary>
        </member>
        <member name="P:BHoM.Materials.Concrete.Grade_C20.ShearModulus">
            <summary>Shear modulus</summary>
        </member>
        <member name="P:BHoM.Materials.Concrete.Grade_C20.CoeffThermalExpansion">
            <summary>Coefficient of thermal expansion</summary>
        </member>
        <member name="M:BHoM.Materials.Concrete.Grade_C20.#ctor">
            <summary>Construct the material</summary>
        </member>
        <member name="M:BHoM.Materials.Concrete.Grade_C20.CalculateValues">
            <summary>Calculate values at construct stage</summary>
        </member>
        <member name="M:BHoM.Materials.Concrete.Grade_C20.CalculateShearModulus">
            <summary>Calculate shear modulus</summary>
        </member>
        <member name="T:BHoM.Materials.Concrete.IConcrete">
            <summary>
            
            </summary>
        </member>
        <member name="T:BHoM.Materials.ISteel">
            <summary>
            Material class for use in all other object classes and namespaces
            </summary>
        </member>
        <member name="T:BHoM.Materials.Material">
            <summary>
            Material class for use in all other object classes and namespaces
            </summary>
        </member>
        <member name="P:BHoM.Materials.Material.YoungsModulus">
            <summary>Young's Modulus (MPa)</summary>
        </member>
        <member name="P:BHoM.Materials.Material.PoissonsRatio">
            <summary>Poissons ratio</summary>
        </member>
        <member name="P:BHoM.Materials.Material.ShearModulus">
            <summary>Shear modulus (MPa)</summary>
        </member>
        <member name="P:BHoM.Materials.Material.DryDensity">
            <summary>Dry density</summary>
        </member>
        <member name="P:BHoM.Materials.Material.CoeffThermalExpansion">
            <summary>Coefficient of thermal expansion</summary>
        </member>
        <member name="P:BHoM.Materials.Material.DampingRatio">
            <summary>Damping ratio</summary>
        </member>
        <member name="M:BHoM.Materials.Material.#ctor">
            <summary>Calculate material values at construct</summary>
        </member>
        <member name="T:BHoM.Materials.SteelGrade">
            <summary>Steel grade</summary>
        </member>
        <member name="F:BHoM.Materials.SteelGrade.S235">
            <summary>UK S235</summary>
        </member>
        <member name="F:BHoM.Materials.SteelGrade.S275">
            <summary>UK S275</summary>
        </member>
        <member name="F:BHoM.Materials.SteelGrade.S355">
            <summary>UK S355</summary>
        </member>
        <member name="F:BHoM.Materials.SteelGrade.S420">
            <summary>UK S420</summary>
        </member>
        <member name="F:BHoM.Materials.SteelGrade.S450">
            <summary>UK S450</summary>
        </member>
        <member name="F:BHoM.Materials.SteelGrade.S460">
            <summary>UK S460</summary>
        </member>
        <member name="F:BHoM.Materials.SteelGrade.unknown">
            <summary>Not known</summary>
        </member>
        <member name="T:BHoM.Materials.MaterialType">
            <summary>
            
            </summary>
        </member>
        <member name="T:BHoM.Materials.DefaultMaterials">
            <summary>
            Default materials
            </summary>
        </member>
        <member name="F:BHoM.Materials.DefaultMaterials.Steel">
            <summary>Steel</summary>
        </member>
        <member name="F:BHoM.Materials.DefaultMaterials.ConcreteShortTerm">
            <summary>Concrete - short term properties</summary>
        </member>
        <member name="F:BHoM.Materials.DefaultMaterials.ConcreteLongTerm">
            <summary>Concrete - long term properties</summary>
        </member>
        <member name="F:BHoM.Materials.DefaultMaterials.Aluminium">
            <summary>Aluminium</summary>
        </member>
        <member name="F:BHoM.Materials.DefaultMaterials.Glass">
            <summary>Glass</summary>
        </member>
        <member name="T:BHoM.Materials.MaterialModel">
            <summary>
            Material analytical model
            </summary>
        </member>
        <member name="F:BHoM.Materials.MaterialModel.MAT_ELAS_ISO">
            <summary>Elastic isotropic</summary>
        </member>
        <member name="F:BHoM.Materials.MaterialModel.MAT_ELAS_ORTHO">
            <summary>Elastic orthotropic</summary>
        </member>
        <member name="F:BHoM.Materials.MaterialModel.MAT_ELAS_PLAS_ISO">
            <summary>Elasto-plastic isotropic</summary>
        </member>
        <member name="F:BHoM.Materials.MaterialModel.MAT_FABRIC">
            <summary>Fabric</summary>
        </member>
        <member name="T:BHoM.Planning.Construction.ConstructionPhase">
            <summary>
            Construction phase class for use across all BHoM projects. By default, construction phases should be
            added to all objects intended for the construction site, or construction phase modelling
            </summary>
        </member>
        <member name="P:BHoM.Planning.Construction.ConstructionPhase.Duration">
            <summary>
            Construction stage duration
            </summary>
        </member>
        <member name="P:BHoM.Planning.Construction.ConstructionPhase.Name">
            <summary>
            Construction stage name
            </summary>
        </member>
        <member name="P:BHoM.Planning.Construction.ConstructionPhase.Number">
            <summary>
            Construction stage sequential number
            </summary>
        </member>
        <member name="P:BHoM.Planning.Construction.ConstructionPhase.StartTime">
            <summary>
            Construction stage start time
            </summary>
        </member>
        <member name="P:BHoM.Planning.Construction.ConstructionPhase.EndTime">
            <summary>
            Construction stage end time
            </summary>
        </member>
        <member name="T:BHoM.Planning.IPhase">
            <summary>
            Phase interface class, holds interface properties for all objects that use phases
            </summary>
        </member>
        <member name="P:BHoM.Planning.IPhase.Name">
            <summary>
            Name of phase
            </summary>
        </member>
        <member name="P:BHoM.Planning.IPhase.Number">
            <summary>
            Phase sequential number
            </summary>
        </member>
        <member name="P:BHoM.Planning.IPhase.Duration">
            <summary>
            Phase duration
            </summary>
        </member>
        <member name="P:BHoM.Planning.IPhase.StartTime">
            <summary>
            Phase starting time
            </summary>
        </member>
        <member name="P:BHoM.Planning.IPhase.EndTime">
            <summary>
            Phase ending time
            </summary>
        </member>
        <member name="T:BHoM.HumanBody.Head">
            <summary>
            BHoM Human head object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.Head.TrackingPoint">
            <summary>Point at centre of head</summary>
        </member>
        <member name="M:BHoM.HumanBody.Head.#ctor">
            <summary>
            Construct an empty head object
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.Head.#ctor(BHoM.Geometry.Point)">
            <summary>
            Construct a head using a point
            </summary>
            <param name="trackingPoint"></param>
        </member>
        <member name="M:BHoM.HumanBody.Head.SetTrackingPoint(BHoM.Geometry.Point)">
            <summary>
            Set the tracking point of a head using a point
            </summary>
            <param name="trackingPoint"></param>
        </member>
        <member name="M:BHoM.HumanBody.Head.SetTrackingPoint(System.Double,System.Double,System.Double)">
            <summary>
            Set the tracking point of a head by coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:BHoM.HumanBody.HandRight">
            <summary>
            BHoM Human right hand object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.HandRight.TrackingPoint">
            <summary>hand tracking centre point</summary>
        </member>
        <member name="P:BHoM.HumanBody.HandRight.TrackingLine">
            <summary>hand tracking centre line</summary>
        </member>
        <member name="P:BHoM.HumanBody.HandRight.State">
            <summary>Hand state (open/closed/tracked)</summary>
        </member>
        <member name="M:BHoM.HumanBody.HandRight.#ctor">
            <summary>
            Constructs an empty right hand object
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.HandRight.#ctor(BHoM.Geometry.Point)">
            <summary>
            Constructs a right hand using a point
            </summary>
            <param name="trackingPoint"></param>
        </member>
        <member name="M:BHoM.HumanBody.HandRight.SetTrackingPoint(BHoM.Geometry.Point)">
            <summary>
            Sets the tracking centre point of a right hand using a point
            </summary>
            <param name="trackingPoint"></param>
        </member>
        <member name="M:BHoM.HumanBody.HandRight.SetTrackingPoint(System.Double,System.Double,System.Double)">
            <summary>
            Sets the tracking centre point of a right hand using coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:BHoM.HumanBody.HandRight.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a left hand using a tracking centreline
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.HandRight.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centreline using a line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.HandRight.SetState(BHoM.HumanBody.HandStateName)">
            <summary>
            Sets the hand state
            </summary>
            <param name="handState"></param>
        </member>
        <member name="T:BHoM.HumanBody.HandLeft">
            <summary>
            BHoM Human left hand object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.HandLeft.TrackingPoint">
            <summary>Left hand tracking centre point</summary>
        </member>
        <member name="P:BHoM.HumanBody.HandLeft.TrackingLine">
            <summary>Left hand tracking cenre line</summary>
        </member>
        <member name="P:BHoM.HumanBody.HandLeft.State">
            <summary>Left hand state (open/closed/tracked)</summary>
        </member>
        <member name="M:BHoM.HumanBody.HandLeft.#ctor">
            <summary>
            Constructs an empty left hand object
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.HandLeft.#ctor(BHoM.Geometry.Point)">
            <summary>
            Constructs a left hand using a point
            </summary>
            <param name="trackingPoint"></param>
        </member>
        <member name="M:BHoM.HumanBody.HandLeft.SetTrackingPoint(BHoM.Geometry.Point)">
            <summary>
            Sets the left hand tracking centre point using a point
            </summary>
            <param name="trackingPoint"></param>
        </member>
        <member name="M:BHoM.HumanBody.HandLeft.SetTrackingPoint(System.Double,System.Double,System.Double)">
            <summary>
            Sets the left hand tracking centre point using coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:BHoM.HumanBody.HandLeft.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a left hand using a tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.HandLeft.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line of a left hand using a line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.HandLeft.SetState(BHoM.HumanBody.HandStateName)">
            <summary>
            Sets the state of a left hand
            </summary>
            <param name="handState"></param>
        </member>
        <member name="T:BHoM.HumanBody.ThumbRight">
            <summary>
            BHoM Human right thumb object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.ThumbRight.TrackingPoint">
            <summary>Right thumb tracking centre point</summary>
        </member>
        <member name="P:BHoM.HumanBody.ThumbRight.TrackingLine">
            <summary>Right thumb tracking centre line</summary>
        </member>
        <member name="M:BHoM.HumanBody.ThumbRight.#ctor">
            <summary>
            Constructs an empty right thumb object
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.ThumbRight.#ctor(BHoM.Geometry.Point)">
            <summary>
            Constructs a right thumb using tracking point
            </summary>
            <param name="trackingPoint"></param>
        </member>
        <member name="M:BHoM.HumanBody.ThumbRight.SetTrackingPoint(BHoM.Geometry.Point)">
            <summary>
            Sets the tracking point of a right thumb
            </summary>
            <param name="trackingPoint"></param>
        </member>
        <member name="M:BHoM.HumanBody.ThumbRight.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a right thumb using the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.ThumbRight.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking line of a right thumb
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.ThumbRight.SetTrackingPoint(System.Double,System.Double,System.Double)">
            <summary>
            Sets the tracking point of a right thumb using coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:BHoM.HumanBody.ThumbLeft">
            <summary>
            BHoM Human left thumb object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.ThumbLeft.TrackingPoint">
            <summary>Lefth thumb tracking point</summary>
        </member>
        <member name="P:BHoM.HumanBody.ThumbLeft.TrackingLine">
            <summary>Left thumb tracking centre line</summary>
        </member>
        <member name="M:BHoM.HumanBody.ThumbLeft.#ctor">
            <summary>
            Constructs an empty left thumb object
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.ThumbLeft.#ctor(BHoM.Geometry.Point)">
            <summary>
            Constructs a left thumb by tracking point
            </summary>
            <param name="trackingPoint"></param>
        </member>
        <member name="M:BHoM.HumanBody.ThumbLeft.SetTrackingPoint(BHoM.Geometry.Point)">
            <summary>
            Sets the tracking point of a left thumb
            </summary>
            <param name="trackingPoint"></param>
        </member>
        <member name="M:BHoM.HumanBody.ThumbLeft.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a left thumb using a tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.ThumbLeft.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line of a left thumb
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.ThumbLeft.SetTrackingPoint(System.Double,System.Double,System.Double)">
            <summary>
            Sets the left thumb tracking point using coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:BHoM.HumanBody.Neck">
            <summary>
            BHoM Human neck object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.Neck.TrackingLine">
            <summary>
            The tracking centre line of a neck
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.Neck.#ctor">
            <summary>
            Constructs an empty neck object
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.Neck.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a neck using a tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.Neck.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line of a neck
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.ShoulderRight">
            <summary>
            BHoM Human right shoulder object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.ShoulderRight.TrackingLine">
            <summary>
            Tracking centre line of the shoulder
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.ShoulderRight.#ctor">
            <summary>
            Constructs an empty right shoulder
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.ShoulderRight.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a right should using a tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.ShoulderRight.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line of the shoulder
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.ShoulderLeft">
            <summary>
            BHoM Human left shoulder object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.ShoulderLeft.TrackingLine">
            <summary>
            Tracking centre line of the left shoulder
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.ShoulderLeft.#ctor">
            <summary>
            Constructs an empty left shoulder object
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.ShoulderLeft.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a left shoulder using a tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.ShoulderLeft.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line of a left shoulder
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.UpperArmRight">
            <summary>
            BHoM Human upper right arm
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.UpperArmRight.TrackingLine">
            <summary>
            Tracking centre line of the upper arm
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.UpperArmRight.#ctor">
            <summary>
            Constructs and empty upper right arm
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.UpperArmRight.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs an upper right arm by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.UpperArmRight.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line of the upper right arm
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.UpperArmLeft">
            <summary>
            BHoM Human left arm object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.UpperArmLeft.TrackingLine">
            <summary>
            Tracking centre line of the upper left arm
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.UpperArmLeft.#ctor">
            <summary>
            Constructs an empty upper left arm object
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.UpperArmLeft.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs an upper left arm by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.UpperArmLeft.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line of the upper left arm
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.LowerArmRight">
            <summary>
            BHoM Human lower right arm object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.LowerArmRight.TrackingLine">
            <summary>
            Tracking centre line of the lower right arm
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.LowerArmRight.#ctor">
            <summary>
            Constructs an empty lower right arm
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.LowerArmRight.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a lower righ arm by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.LowerArmRight.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.LowerArmLeft">
            <summary>
            BHoM Human lower left arm
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.LowerArmLeft.TrackingLine">
            <summary>
            Tracking centre line of the lower left arm
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.LowerArmLeft.#ctor">
            <summary>
            Constructs an empty lower left arm 
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.LowerArmLeft.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a lower left arm by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.LowerArmLeft.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.Spine">
            <summary>
            BHoM Human spine object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.Spine.TrackingLine">
            <summary>
            Tracking centre line of the spine
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.Spine.#ctor">
            <summary>
            Constructs an empty spine
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.Spine.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a spine by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.Spine.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.HipRight">
            <summary>
            BHoM Human right hip object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.HipRight.TrackingLine">
            <summary>
            Tracking centre line
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.HipRight.#ctor">
            <summary>
            Constructs an empty right hip
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.HipRight.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a right hip by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.HipRight.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.HipLeft">
            <summary>
            BHoM Human left hip object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.HipLeft.TrackingLine">
            <summary>
            Tracking centre line of left hip
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.HipLeft.#ctor">
            <summary>
            Constructs an empty left hip
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.HipLeft.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a left hip by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.HipLeft.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.UpperLegRight">
            <summary>
            BHoM upper right leg object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.UpperLegRight.TrackingLine">
            <summary>
            Tracking centre line of upper right leg
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.UpperLegRight.#ctor">
            <summary>
            Constructs an empty upper right leg
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.UpperLegRight.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs an upper right leg by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.UpperLegRight.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.UpperLegLeft">
            <summary>
            BHoM Human upper left leg
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.UpperLegLeft.TrackingLine">
            <summary>
            Tracking centre line of upper left leg
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.UpperLegLeft.#ctor">
            <summary>
            Constructs an empty upper left leg
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.UpperLegLeft.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs an upper left leg by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.UpperLegLeft.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.LowerLegRight">
            <summary>
            BHoM Human lower right leg
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.LowerLegRight.TrackingLine">
            <summary>
            Tracking centre line of lower right leg
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.LowerLegRight.#ctor">
            <summary>
            Constructs an empty lower right leg
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.LowerLegRight.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a lower right leg by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.LowerLegRight.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.LowerLegLeft">
            <summary>
            BHoM Human lower left leg object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.LowerLegLeft.TrackingLine">
            <summary>
            Tracking centre line of the lower left leg
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.LowerLegLeft.#ctor">
            <summary>
            Constructs an empty lower left leg
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.LowerLegLeft.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a lower left leg by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.LowerLegLeft.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.FootRight">
            <summary>
            BHoM Human right foot object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.FootRight.TrackingLine">
            <summary>
            Tracking centre line of right foot
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.FootRight.#ctor">
            <summary>
            Constructs an empty right foot
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.FootRight.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a right foot by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.FootRight.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.FootLeft">
            <summary>
            BHoM Human left foot object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.FootLeft.TrackingLine">
            <summary>
            Tracking centre line of left foot
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.FootLeft.#ctor">
            <summary>
            Constructs an empty left foot object
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.FootLeft.#ctor(BHoM.Geometry.Line)">
            <summary>
            Constructs a left foot by tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="M:BHoM.HumanBody.FootLeft.SetTrackingLine(BHoM.Geometry.Line)">
            <summary>
            Sets the tracking centre line
            </summary>
            <param name="trackingLine"></param>
        </member>
        <member name="T:BHoM.HumanBody.Skeleton">
            <summary>
            BHoM Human skeleton class
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.Skeleton.#ctor">
            <summary>
            Constructs an empty skeleton object
            </summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.Head">
            <summary>Head</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.HandRight">
            <summary>Right hand</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.HandLeft">
            <summary>Left hand</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.ThumbRight">
            <summary>Right thumb</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.ThumbLeft">
            <summary>Left thumb</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.Neck">
            <summary>Neck</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.ShoulderRight">
            <summary>Right shoulder</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.ShoulderLeft">
            <summary>Left shoulder</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.Spine">
            <summary>Spine</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.HipRight">
            <summary>Right hip</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.HipLeft">
            <summary>Left hip</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.UpperArmRight">
            <summary>Upper right arm</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.UpperArmLeft">
            <summary>Upper left arm</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.LowerArmRight">
            <summary>Lower right arm</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.LowerArmLeft">
            <summary>Lower left arm</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.UpperLegRight">
            <summary>Upper right leg</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.UpperLegLeft">
            <summary>Upper left leg</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.LowerLegRight">
            <summary>Lower right leg</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.LowerLegLeft">
            <summary>Lower left leg</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.FootRight">
            <summary>Right foot</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.FootLeft">
            <summary>Left foot</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.TrackingPoints">
            <summary>Dictionary of points with joint names as keys</summary>
        </member>
        <member name="P:BHoM.HumanBody.Skeleton.TrackingLines">
            <summary>Dictionary of tracking lines with string keys</summary>
        </member>
        <member name="M:BHoM.HumanBody.Skeleton.SetBodyPartsbyTrackingPoints">
            <summary>
            Sets the body parts using tracking points. Try loops used for all actions 
            in case body part tracking points are not detected
            </summary>
        </member>
        <member name="M:BHoM.HumanBody.Skeleton.GetAllTrackingLines">
            <summary>
            Get all the tracking lines from the skeleton
            </summary>
            <returns></returns>
        </member>
        <member name="T:BHoM.HumanBody.JointName">
            <summary>
            Joint names
            </summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.Head">
            <summary>Head</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.SpineShoulder">
            <summary>Upper spine</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.ShoulderRight">
            <summary>Right shoulder</summary>  
        </member>
        <member name="F:BHoM.HumanBody.JointName.ShoulderLeft">
            <summary>Left shoulder</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.Neck">
            <summary>Neck</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.ElbowRight">
            <summary>Right elbow</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.ElbowLeft">
            <summary>Left elbow</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.HandRight">
            <summary>Right hand</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.HandLeft">
            <summary>Left hand</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.HandTipRight">
            <summary>Tip of the right hand</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.HandTipLeft">
            <summary>Tip of the left hand</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.ThumbRight">
            <summary>Right thumb</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.ThumbLeft">
            <summary>Left thumb</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.WristRight">
            <summary>Right wrist</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.WristLeft">
            <summary>Left wrist</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.SpineMid">
            <summary>Mid spine</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.SpineBase">
            <summary>Spine base</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.HipRight">
            <summary>Right hip</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.HipLeft">
            <summary>Left hip</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.KneeRight">
            <summary>Right knee</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.KneeLeft">
            <summary>Left knee</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.AnkleRight">
            <summary>Right ankle</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.AnkleLeft">
            <summary>Left ankle</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.FootRight">
            <summary>Right foot</summary>
        </member>
        <member name="F:BHoM.HumanBody.JointName.FootLeft">
            <summary>Left foot</summary>
        </member>
        <member name="T:BHoM.HumanBody.HandStateName">
            <summary>
            Hand state values
            </summary>
        </member>
        <member name="F:BHoM.HumanBody.HandStateName.Closed">
            <summary>Close</summary>
        </member>
        <member name="F:BHoM.HumanBody.HandStateName.Lasso">
            <summary>Lasso</summary>
        </member>
        <member name="F:BHoM.HumanBody.HandStateName.NotTracked">
            <summary>Not tracked</summary>
        </member>
        <member name="F:BHoM.HumanBody.HandStateName.Open">
            <summary>Open</summary>
        </member>
        <member name="F:BHoM.HumanBody.HandStateName.Unknown">
            <summary>Not known</summary>
        </member>
        <member name="T:BHoM.UK_SectionsDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:BHoM.UK_SectionsDataSet.SectionsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:BHoM.UK_SectionsDataSet.SectionsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:BHoM.UK_SectionsDataSet.SectionsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:BHoM.UK_SectionsDataSetTableAdapters.SectionsTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:BHoM.UK_SectionsDataSetTableAdapters.TableAdapterManager">
             <summary>
            TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
            </summary>
        </member>
        <member name="M:BHoM.UK_SectionsDataSetTableAdapters.TableAdapterManager.UpdateUpdatedRows(BHoM.UK_SectionsDataSet,System.Collections.Generic.List{System.Data.DataRow},System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Update rows in top-down order.
            </summary>
        </member>
        <member name="M:BHoM.UK_SectionsDataSetTableAdapters.TableAdapterManager.UpdateInsertedRows(BHoM.UK_SectionsDataSet,System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Insert rows in top-down order.
            </summary>
        </member>
        <member name="M:BHoM.UK_SectionsDataSetTableAdapters.TableAdapterManager.UpdateDeletedRows(BHoM.UK_SectionsDataSet,System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Delete rows in bottom-up order.
            </summary>
        </member>
        <member name="M:BHoM.UK_SectionsDataSetTableAdapters.TableAdapterManager.GetRealUpdatedRows(System.Data.DataRow[],System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
            </summary>
        </member>
        <member name="M:BHoM.UK_SectionsDataSetTableAdapters.TableAdapterManager.UpdateAll(BHoM.UK_SectionsDataSet)">
             <summary>
            Update all changes to the dataset.
            </summary>
        </member>
        <member name="T:BHoM.UK_SectionsDataSetTableAdapters.TableAdapterManager.UpdateOrderOption">
             <summary>
            Update Order Option
            </summary>
        </member>
        <member name="T:BHoM.UK_SectionsDataSetTableAdapters.TableAdapterManager.SelfReferenceComparer">
             <summary>
            Used to sort self-referenced table's rows
            </summary>
        </member>
    </members>
</doc>
